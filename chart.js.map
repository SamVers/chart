{"version":3,"file":"chart.js","sources":["xy-chart-draw.js","xy-chart-zoom.js","xy-chart-select.js","xy-chart.js","time-chart-draw.js","time-chart-zoom.js","time-chart.js","legend.js","stats.js","fx.js"],"sourcesContent":["import * as d3 from 'd3'\r\n\r\nexport const xyDrawMethods = {\r\n\r\n    drawData(type,points,color){\r\n\r\n        switch(type) {\r\n            case \"line\":    return this.drawLine(points,color)\r\n            case \"bar\":     return this.drawBar(points,color)\r\n            case \"scatter\": return this.drawScatter(points,color)\r\n            case \"area\":    return this.drawArea(points,color)   \r\n        }\r\n    },\r\n\r\n    drawLine(points,color) {\r\n\r\n        // notation\r\n        let xScale = this.xScale\r\n        let yScale = this.yScale\r\n        let xMin = this.xRange.min, xMax = this.xRange.max\r\n\r\n        // define a group for the chart area\r\n        let chart = this.chartArea.svg.append(\"g\")\r\n\r\n        // create a line generator - returns a path string  - check if the data fits on the graph first     \r\n        \r\n        let line = d3.line()\r\n            .defined( d => {if ((d.x > xMax)||(d.x < xMin)) return false; else return true})\r\n            .x ( d => xScale(d.x))\r\n            .y ( d => yScale(d.y))\r\n            .curve(d3.curveLinear)\r\n\r\n        // add the line to the chart\r\n        chart.append(\"path\")\r\n            .datum(points)\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", color)\r\n            .attr(\"stroke-linejoin\", \"round\")\r\n            .attr(\"stroke-linecap\", \"round\")\r\n            .attr(\"stroke-width\", 1.5)\r\n            .attr(\"d\", line)\r\n    },\r\n \r\n    drawArea(points,color) {\r\n\r\n        // notation\r\n        const margin = this.css.margin\r\n        let xScale = this.xScale\r\n        let yScale = this.yScale\r\n        let xMin = this.xRange.min, xMax = this.xRange.max\r\n\r\n        // define a group for the chart area\r\n        let chart = this.svg.append(\"g\").attr(\"transform\", `translate( ${margin.left}, ${margin.top})`)\r\n\r\n        // create an area generator\r\n        let area = d3.area()\r\n            .defined( d => {if ((d.x > xMax)||(d.x < xMin)) return false; else return true})\r\n            .x(  d => xScale(d.x) )\r\n            .y0( d => yScale(0))\r\n            .y1( d => yScale(d.y))\r\n            .curve(d3.curveLinear)\r\n\r\n        // add the line to the chart\r\n        chart.append(\"path\")\r\n            .datum(points)\r\n            .attr(\"fill\", color)\r\n            .attr(\"stroke\", \"none\")\r\n            .attr(\"stroke-linejoin\", \"round\")\r\n            .attr(\"stroke-linecap\", \"round\")\r\n            .attr(\"stroke-width\", 1.5)\r\n            .attr(\"d\", area)           \r\n    },\r\n\r\n    // in low x-resolution discrete functions are drawn with little circles\r\n    drawScatter(points,color) {\r\n\r\n        // notation\r\n        let xScale = this.xScale\r\n        let yScale = this.yScale\r\n        let xMin = this.xRange.min, xMax = this.xRange.max\r\n        let yMin = this.yRange.min, yMax = this.yRange.max\r\n\r\n        // define a group for the chart data \r\n        let chart = this.chartArea.svg.append(\"g\")\r\n\r\n        // the radius of the symbols used\r\n        let radius = this.scatter.symbolSize\r\n\r\n        chart.selectAll(\"circle\")\r\n        .data(points)\r\n        .join(\r\n            enter =>    \r\n                // only draw a circle for data that is on the graph area\r\n                enter.filter( d => {if ((d.x > xMax)||(d.x < xMin)||(d.y > yMax)||(d.y < yMin)) return false; else return true})\r\n                    .append(\"circle\")\r\n                    .attr(\"cx\",  d => xScale(d.x))\r\n                    .attr(\"cy\",  d => yScale(d.y))\r\n                    .attr(\"r\", radius)\r\n                    .attr(\"fill\",color),\r\n\r\n            // actually - there is no update section !\r\n            update => update.attr(\"fill\",\"red\")\r\n        )\r\n    },\r\n\r\n    drawBar(points,color) {\r\n\r\n        if (points.length < 2) return\r\n        \r\n        // notation\r\n        //const margin = this.css.margin\r\n        let xScale = this.xScale\r\n        let yScale = this.yScale\r\n        let xMin = this.xRange.min, xMax = this.xRange.max\r\n        //let yMin = this.yRange.min, yMax = this.yRange.max\r\n\r\n        // define a group for the chart area\r\n        let chart = this.chartArea.svg.append(\"g\")\r\n        let barWidth = xScale(points[1].x) - xScale(points[0].x)\r\n        let zeroY = yScale(0)\r\n        let opacity = 1 - (this.dataSeries.length - 1)*0.1\r\n\r\n        chart.selectAll(\"rect\")\r\n            .data(points)\r\n            .join(\r\n                enter => enter\r\n                    .filter( d => {if ((d.x > xMax)||(d.x < xMin)) return false; else return true })                    \r\n                    .append(\"rect\")\r\n                    .attr(\"x\", d=>xScale(d.x)-barWidth/2)\r\n                    .attr(\"y\", d=>yScale(d.y))\r\n                    .attr(\"width\",barWidth)\r\n                    .attr(\"height\",d => Math.abs(yScale(d.y) - zeroY) )\r\n                    .attr(\"fill\", color)\r\n                    .attr(\"opacity\",opacity),\r\n\r\n                // actually - there is no update section !\r\n                update => update.attr(\"fill\",\"red\")\r\n            )\r\n    },\r\n}","import * as d3 from 'd3'\r\n\r\nexport const xyZoomMethods = {\r\n\r\n    // the zoom callback\r\n    zoomXAxis( ) {\r\n\r\n        // the source event\r\n        let e = d3.event.sourceEvent\r\n\r\n        // check the event type\r\n        if (e.type == \"wheel\") this.scaleXAxis(e, this.xRange )\r\n        else if (e.type == \"mousemove\") this.moveXAxis(e, this.xRange)\r\n        else return\r\n\r\n        // we can display the new range as a line or seperate points - set the corresponding draw function\r\n        // this.drawData = (this.xRange.max - this.xRange.min < this.scatter.limit) ? this.drawScatter : this.drawLine\r\n\r\n        // redraw\r\n        this.drawAll()\r\n    },\r\n\r\n    scaleXAxis(e, range) {\r\n\r\n        // select a scale factor\r\n        let k = +e.wheelDelta > 0 ? 0.9 : 1.1\r\n\r\n        // get the range equivalent of the pixel position of the cursor\r\n        let cursor = this.xScale.invert(+e.offsetX - this.css.margin.left)\r\n\r\n        // adapt the range\r\n        range.min = k*(range.min - cursor) + cursor\r\n        range.max = k*(range.max - cursor) + cursor\r\n    },\r\n\r\n    moveXAxis( e, range) {\r\n\r\n        let move = this.xScale.invert(e.movementX) - this.xScale.invert(0)\r\n        range.min -= move\r\n        range.max -= move\r\n    },\r\n\r\n    // the zoom callback\r\n    zoomYAxis( ) {\r\n\r\n        // the source event\r\n        let e = d3.event.sourceEvent\r\n\r\n        // check the event type\r\n        if (e.type == \"wheel\") this.scaleYAxis(e, this.yRange )\r\n        else if (e.type == \"mousemove\") this.moveYAxis(e, this.yRange)\r\n        else return\r\n\r\n        // and draw the chart\r\n        this.drawAll()\r\n    },\r\n\r\n    // the zoom callback for zooming when the cursor is in the axis\r\n    zoomYAxisInAxis( ) {\r\n\r\n        // the source event\r\n        let e = d3.event.sourceEvent\r\n\r\n        // check the event type\r\n        if (e.type == \"wheel\") this.scaleYAxisAroundCursor(e, this.yRange )\r\n        else if (e.type == \"mousemove\") this.moveYAxis(e, this.yRange)\r\n        else return\r\n\r\n        // and draw the chart\r\n        this.drawAll()\r\n    },\r\n\r\n    scaleYAxis(e, range) {\r\n\r\n        // select a scale factor\r\n        let k = +e.wheelDelta > 0 ? 0.9 : 1.1\r\n\r\n        // get the range equivalent of the pixel position of the cursor\r\n        let cursor = this.yScale.invert(e.offsetY - this.css.margin.top) \r\n    \r\n        // adjust the range\r\n        //range.min = k*(range.min - cursor) + cursor\r\n        //range.max = k*(range.max - cursor) + cursor\r\n        range.max = k*range.max\r\n    },\r\n\r\n    // the value under the cursor is kept central\r\n    scaleYAxisAroundCursor(e, range) {\r\n\r\n        // select a scale factor\r\n        let k = +e.wheelDelta > 0 ? 0.9 : 1.1\r\n\r\n        // get the range equivalent of the pixel position of the cursor\r\n        let cursor = this.yScale.invert(e.offsetY - this.css.margin.top) \r\n    \r\n        // adjust the range\r\n        range.min = k*(range.min - cursor) + cursor\r\n        range.max = k*(range.max - cursor) + cursor\r\n    },\r\n\r\n    moveYAxis(e, range) {\r\n\r\n        let move = this.yScale.invert(e.movementY) - this.yScale.invert(0)\r\n        range.min -= move\r\n        range.max -= move\r\n    },\r\n\r\n    zoomXY() {\r\n        // the source event\r\n        let e = d3.event.sourceEvent\r\n\r\n        // check the event type\r\n        if (e.type == \"wheel\") this.scaleYAxis(e, this.yRange )\r\n        else if (e.type == \"mousemove\") this.moveXY(e, this.xRange, this.yRange)\r\n        else return\r\n\r\n        // and draw the chart\r\n        this.drawAll()\r\n    },\r\n\r\n    moveXY(e,xRange, yRange) {\r\n\r\n        let move = this.xScale.invert(e.movementX) - this.xScale.invert(0)\r\n        xRange.min -= move\r\n        xRange.max -= move\r\n\r\n        move = this.yScale.invert(e.movementY) - this.yScale.invert(0)\r\n        yRange.min -= move\r\n        yRange.max -= move\r\n    }\r\n}","import * as d3 from 'd3'\r\n\r\nexport const xySelectMethods = {\r\n\r\n    makeSelectBox() {\r\n\r\n        this.chartArea.svg\r\n        .attr(\"style\",\"cursor:crosshair\")\r\n        .call(d3.drag()\r\n            .on(\"start\", (d)=>this.startSelectBox(d))\r\n            .on(\"drag\",  (d)=>this.growSelectBox(d))\r\n            .on(\"end\",   (d)=>this.stopSelectBox(d)))\r\n        .call(d3.zoom().on(\"zoom\", () => this.zoomYAxis()))\r\n\r\n        // prepare the slection rectangle - size 0\r\n        this.chartArea.selectBox = this.chartArea.svg.append(\"rect\")           \r\n            .attr(\"x\", 0).attr(\"y\", 0).attr(\"width\",0).attr(\"height\",0)\r\n            .attr(\"visibility\",\"hidden\")    \r\n            .attr(\"fill\",this.css.selectBoxColor)\r\n            .attr(\"style\",\"cursor:grab\")\r\n    },\r\n\r\n    // Drag functions to make a select box\r\n    startSelectBox(d) {\r\n        // postition the select box under the cursor\r\n        this.chartArea.selectBox\r\n            .attr(\"x\", d3.event.x)\r\n            .attr(\"y\", d3.event.y)\r\n            .attr(\"width\",0)\r\n            .attr(\"height\",0)\r\n            .attr(\"visibility\",\"visible\")   \r\n            .attr(\"transform\", \"translate( 0 0 )\") \r\n    },\r\n    \r\n    growSelectBox(d) {\r\n        let x = +d3.event.subject.x \r\n        let y = +d3.event.subject.y \r\n        let w = +d3.event.x - x \r\n        let h = +d3.event.y - y\r\n\r\n        // The box can grow in four directions - but svg bx is defined by left upper corner !\r\n        if (w > 0) {\r\n            if ( h > 0)\r\n                this.chartArea.selectBox.attr(\"width\",w).attr(\"height\",h)\r\n            else \r\n                this.chartArea.selectBox.attr(\"y\", y + h).attr(\"width\",w).attr(\"height\",-h)\r\n        }\r\n        else {\r\n            if (h > 0) \r\n                this.chartArea.selectBox.attr(\"x\", x + w).attr(\"width\",-w).attr(\"height\",h)\r\n            else \r\n                this.chartArea.selectBox.attr(\"x\", x + w).attr(\"y\", y + h).attr(\"width\",-w).attr(\"height\",-h)               \r\n        }\r\n    },\r\n    \r\n    stopSelectBox(d) {\r\n\r\n        // set the drag callbacks for the selectbox\r\n        this.chartArea.selectBox\r\n            .call(d3.drag()\r\n            .on(\"start\", (d)=>this.grabSelectBox(d))\r\n            .on(\"drag\", (d)=>this.moveSelectBox(d))\r\n            .on(\"end\", (d)=>this.releaseSelectBox(d)));       \r\n    },\r\n\r\n    // we replace some of the drag reactors\r\n    grabSelectBox(d) {\r\n\r\n        // change the cursor\r\n        this.chartArea.selectBox.attr(\"style\",\"cursor:grabbing\")\r\n\r\n        // notation\r\n        let selectBox = this.chartArea.selectBox\r\n\r\n        // get the x-dimensions of the box and chart\r\n        let boxWidth = +selectBox.attr(\"width\")\r\n        let boxX = +selectBox.attr(\"x\")\r\n\r\n        // calculate the x selection\r\n        this.xSelect.min = Math.floor(this.xScale.invert( boxX )) + 1\r\n        this.xSelect.max = Math.floor(this.xScale.invert( boxX + boxWidth))\r\n\r\n        // get the y-dimensions and the \r\n        let boxHeight = +selectBox.attr(\"height\")\r\n        let boxY = +selectBox.attr(\"y\")\r\n\r\n        // calculate the y selection\r\n        this.ySelect.min = this.yScale.invert(boxY + boxHeight) \r\n        this.ySelect.max = this.yScale.invert(boxY)\r\n\r\n        // create the selected ranges for the function\r\n        this.searchIntervals()\r\n\r\n        // set the saved yMove to zero !\r\n        this.yMoveSave = 0\r\n    },\r\n\r\n    moveSelectBox(d) {\r\n\r\n        // we only move in the y-direction\r\n        let pixelMove = d3.event.y - d3.event.subject.y\r\n\r\n        // set the new y position of the rectangle\r\n        this.chartArea.selectBox.attr(\"transform\", \"translate( 0 \" + pixelMove + \")\")\r\n\r\n        // now move the data in the ranges over the required distance\r\n        let yMove = this.yScale.invert(d3.event.y) - this.yScale.invert(d3.event.subject.y)\r\n\r\n        // difference between current move and previous move \r\n        let deltaY = yMove - this.yMoveSave\r\n\r\n        // notation\r\n        let points = this.data[0].points\r\n        let nI, Interval, i\r\n\r\n        // adjust y in all intervals\r\n        for (nI=0; nI < this.xIntervals.length; nI++) {          \r\n            Interval = this.xIntervals[nI]\r\n            for (i= Interval.from; i <= Interval.to; i++) {               \r\n                points[i].y += deltaY\r\n            }\r\n        }\r\n\r\n        // save the move that was applied for the next time\r\n        this.yMoveSave = yMove\r\n\r\n        // redraw the data\r\n        this.redrawData()\r\n    },\r\n\r\n    releaseSelectBox(d) {\r\n\r\n        //set the transform to zero\r\n        this.chartArea.selectBox.attr(\"transform\", \"translate ( 0 0 )\")\r\n\r\n        // get the original position before the grab started\r\n        let y = +this.chartArea.selectBox.attr(\"y\")\r\n\r\n        // get the move in pixels\r\n        let pixelMove = d3.event.y - d3.event.subject.y\r\n\r\n        // and set the rectangle at its new position\r\n        this.chartArea.selectBox.attr(\"y\", y + pixelMove)\r\n\r\n        // change the cursor\r\n        this.chartArea.selectBox.attr(\"style\",\"cursor:grab\")\r\n    },\r\n\r\n    searchIntervals() {\r\n        \r\n        // reset the current array of intervals\r\n        this.xIntervals.length = 0\r\n\r\n        // check\r\n        if ( ! this.haveData() ) return\r\n\r\n        // notation\r\n        let d = this.data[0].points\r\n        let xr = this.xSelect\r\n        let yr = this.ySelect\r\n        let i,j\r\n\r\n        i = xr.min\r\n        while(true) {\r\n            // search the start of an interval\r\n            for ( ; i <= xr.max; i++ ) if (( d[i].y > yr.min ) && ( d[i].y < yr.max )) break\r\n            \r\n            // check if at the end of the range\r\n            if (i > xr.max) break\r\n\r\n            // search the end of an interval\r\n            for ( j = i; j <= xr.max; j++ ) if (( d[j].y < yr.min ) || ( d[j].y > yr.max )) break\r\n            \r\n            // we have an interval\r\n            this.xIntervals.push({from:i,to:j-1})        \r\n            \r\n            // check if at the end of the range\r\n            if (j > xr.max) break; else i = j                    \r\n        }\r\n    }   \r\n}","import * as d3 from 'd3'\r\nimport {xyDrawMethods } from './xy-chart-draw'\r\nimport {xyZoomMethods } from './xy-chart-zoom'\r\nimport {xySelectMethods } from './xy-chart-select'\r\n\r\n// A class to display a function\r\nexport class chartClass {                \r\n\r\n    constructor(svgId){\r\n\r\n        // get the svg\r\n        let svg = d3.select(\"#\" + svgId)\r\n\r\n        // check\r\n        if (svg == null) return\r\n\r\n        this.svg = svg                  // the container for the chart\r\n        this.position = {x: 0,y: 0}     // position in the container\r\n        this.legend = null              // the legend class\r\n        this.xLabel = \"\"\r\n        this.xRange = {min:0,max:1}     // x range\r\n        this.xScale = null              // x-axis scale function\r\n        this.yLabel = \"\"\r\n        this.yRange = {min:0,max:1}     // y-range\r\n        this.yScale = null              // y-axis scale function\r\n        this.dataSeries = []            // data objects - each object has a name + color + data points \r\n        this.chartArea = {              // the svg for the chart area (change cursor etc)\r\n            width : 0,\r\n            height : 0,\r\n            svg:null,                   // the svg of the chartArea\r\n            allowSelection:false,       // allows or denies selections in the chart area\r\n            selectBox:null,             // a rectangle to select in the chart\r\n        }\r\n\r\n        // the x-and y-range that correspond with the selection\r\n        this.xSelect = {min:0, max:0}\r\n        this.ySelect = {min:0, max:0}\r\n\r\n        // the limit to draw individual points\r\n        this.scatter = {limit:25, symbolSize:2}\r\n\r\n        // only the y values that are in the box are selected\r\n        // so it could be that the selected range is cut up in several intervals\r\n        this.xIntervals = []\r\n\r\n        // while moving the selection box we keep track of the previous move\r\n        this.yMove = 0\r\n\r\n        // The css settings that this chart uses\r\n        this.css = {\r\n            margin:{ top:0,right:0,bottom:0,left:0},        // the margin for the axes and labels\r\n            labelFontSize: null,\r\n            labelColor: null,\r\n            defaultDataColor: null,\r\n            chartBackground: null,\r\n            selectBoxColor: null,\r\n        }\r\n\r\n        // get the CSS settings \r\n        this.getCSS(svg)\r\n    }\r\n\r\n    getCSS(svg) {\r\n\r\n        // get the computed style\r\n        let style = getComputedStyle( svg.node() )\r\n\r\n        // check\r\n        if (style == null) return;\r\n\r\n        // notations\r\n        let css = this.css\r\n\r\n        // get the margin setting\r\n        let marginString = style.getPropertyValue(\"--chart-margin\")\r\n\r\n        // check\r\n        if (marginString ) {\r\n            // regular expression for a floating point number\r\n            let regex = /[+-]?[0-9]*\\.?[0-9]+/g\r\n\r\n            // parse the margin settings\r\n            let marginArray = marginString.match(regex)\r\n\r\n            // set the margin\r\n            css.margin.top = +marginArray[0]\r\n            css.margin.right = +marginArray[1]\r\n            css.margin.bottom = +marginArray[2]\r\n            css.margin.left = +marginArray[3]\r\n        }\r\n\r\n        // getPropertyValue returns a string with quotes around it (stringify) !!!!!\r\n        let prop = (p) => { return JSON.parse( style.getPropertyValue( p ) ) }\r\n\r\n        // get the other values\r\n        css.labelFontSize = prop(\"--chart-lblsz\")\r\n        css.labelColor = prop(\"--chart-lblclr\")\r\n        css.defaultDataColor = prop(\"--chart-dataclr\")\r\n        css.chartBackground = prop(\"--chart-bckgrnd\")\r\n        css.selectBoxColor = prop(\"--chart-selectclr\")\r\n    }\r\n\r\n    // a simple function to check if we have data\r\n    haveData() {\r\n        if ((this.data.length < 1)||(this.data[0].points == null)||(this.data[0].points.length < 1)) return false\r\n        else return true\r\n    }\r\n\r\n    // redraws the entire chart - most often because of a scale change\r\n    drawAll(){\r\n\r\n        // clean up the current chart\r\n        this.svg.selectAll(\"g\").remove()\r\n\r\n        // create an svg for the chart area\r\n        this.addChartArea()\r\n\r\n        // set the scale for the x axis\r\n        this.createxScale()\r\n\r\n        // set the scale for the y-axis\r\n        this.createyScale()\r\n\r\n        // if there is data to display draw the chart using the y and x scale \r\n        this.drawDataSeries()\r\n\r\n        // now we draw the x-axis\r\n        this.drawxAxis()\r\n\r\n        // draw the y-axis\r\n        this.drawyAxis()\r\n\r\n        // check if the chart needs a legend\r\n        if (this.legend) this.legend.draw()\r\n    }\r\n\r\n    // only draws the data\r\n    drawDataSeries() {\r\n\r\n        // clean up the current graph - ACTUALLY because the g has no id, it gets overwritten anyhow !\r\n        this.chartArea.svg.selectAll(\"g\").remove()\r\n\r\n        // if there is data to display draw the chart using the y and x scale \r\n        if (this.dataSeries.length > 0) this.dataSeries.forEach( (item)=>this.drawData(item.type,item.points,item.color) )\r\n    }\r\n\r\n    // the range can be changed\r\n    setXRange(min, max) {\r\n        this.xRange.min = min\r\n        this.xRange.max = max\r\n    }\r\n\r\n    setYRange(min, max) {\r\n        this.yRange.min = min\r\n        this.yRange.max = max\r\n    }\r\n\r\n    setXLabel(label) { this.xLabel = label}\r\n    setYLabel(label) { this.yLabel = label}\r\n\r\n    addData(name, type, points, color) {\r\n\r\n        // check if it exists\r\n        for (let i = 0; i < this.dataSeries.length; i++) {\r\n            if (this.dataSeries[i].name == name) {\r\n                this.dataSeries[i].points = points\r\n                this.dataSeries[i].color = color\r\n                return\r\n            }\r\n        }\r\n\r\n        // not found - add the new series\r\n        this.dataSeries.push({name, type, points, color})\r\n    }\r\n\r\n    addChartArea() {\r\n\r\n        // clean up the current chart\r\n        if (this.chartArea.svg)  this.chartArea.svg.remove()\r\n\r\n        // notation\r\n        let margin = this.css.margin\r\n\r\n        // set the width and height of the chart area based on the containing svg\r\n        let width = +this.svg.property(\"clientWidth\") - margin.left - margin.right\r\n        let height = +this.svg.property(\"clientHeight\") - margin.top - margin.bottom\r\n\r\n        // set the size of the chart area\r\n        this.chartArea.width = width \r\n        this.chartArea.height = height \r\n\r\n        // create an svg for the chart area\r\n        this.chartArea.svg = this.svg.append(\"svg\")\r\n            .attr(\"x\", margin.left)\r\n            .attr(\"y\", margin.top)\r\n            .attr(\"width\",width)\r\n            .attr(\"height\",height)\r\n            .attr(\"style\",\"clip-path: view-box\")\r\n\r\n        // a background rectangle\r\n        this.chartArea.svg.append(\"rect\")\r\n            .attr(\"x\", 0).attr(\"y\", 0)\r\n            .attr(\"width\",this.chartArea.width)\r\n            .attr(\"height\",this.chartArea.height)\r\n            .attr(\"fill\",this.css.chartBackground)           \r\n            .attr(\"opacity\",1)\r\n \r\n        //if selection is allowed..\r\n        if ( this.chartArea.allowSelection) \r\n\r\n            // we add a selection box\r\n            this.makeSelectBox()\r\n        else \r\n            this.chartArea.svg\r\n                .attr(\"style\",\"cursor:move\")\r\n                .call(d3.zoom().on(\"zoom\", () => this.zoomXY()))\r\n    }\r\n\r\n    createxScale(){\r\n        // set the scale for the x-axis\r\n        this.xScale = d3.scaleLinear()\r\n            .range([0,this.chartArea.width])\r\n            .domain([this.xRange.min, this.xRange.max])\r\n\r\n        return true\r\n    }\r\n\r\n    drawxAxis() {\r\n        // shorter notation\r\n        const width = this.chartArea.width\r\n        const height = this.chartArea.height\r\n        const margin = this.css.margin      \r\n\r\n        // append a group for the axis\r\n        const xAxis = this.svg.append(\"g\")\r\n            .attr(\"class\", \"x-axis\")\r\n            .attr(\"transform\", `translate( ${margin.left}, ${height + margin.top})`)       \r\n\r\n        // make the x-axis draw function\r\n        let draw = d3.axisBottom(this.xScale).tickSize(-height)\r\n\r\n        // draw the x-axis ticks - no selection or any other action on the ticks !\r\n        xAxis.append(\"g\")\r\n            .attr(\"class\", \"x-ticks\")\r\n            .attr(\"cursor\", \"none\")\r\n            .attr(\"pointer-events\", \"none\")\r\n            .call(draw)\r\n\r\n        // put a label on the axis\r\n        xAxis.append(\"text\")\r\n            .attr(\"fill\", this.css.labelColor)\r\n            .attr(\"font-size\",this.css.labelFontSize)\r\n            .attr(\"x\",width - (this.xLabel.length)*5)\r\n            .attr(\"y\",margin.bottom - 3)\r\n            .attr(\"text-anchor\", \"start\")\r\n            .text(this.xLabel)\r\n    \r\n        // make an invisible rectangle over the chart + x-axis for the zooming behaviour\r\n        xAxis.append(\"rect\")\r\n            .attr(\"x\", 0).attr(\"y\", 0)\r\n            .attr(\"width\",width)\r\n            .attr(\"height\",margin.bottom)\r\n            .attr(\"opacity\",0)\r\n            .attr(\"style\",\"cursor:e-resize\")\r\n            .call(d3.zoom().on(\"zoom\", () => this.zoomXAxis()))\r\n    }\r\n\r\n    createyScale(){\r\n\r\n        // set the scale for the y-axis\r\n        this.yScale = d3.scaleLinear()\r\n            .range([this.chartArea.height, 0])\r\n            .domain([this.yRange.min, this.yRange.max])\r\n    }\r\n\r\n    drawyAxis(){\r\n\r\n        // notation\r\n        const margin = this.css.margin    \r\n        const width = this.chartArea.width\r\n        const height = this.chartArea.height\r\n\r\n        // create the y-axis group\r\n        const yAxis = this.svg.append(\"g\")\r\n            .attr(\"class\", \"y-axis\")\r\n            .attr(\"transform\", `translate( ${margin.left}, ${margin.top} )`)\r\n        \r\n        // make the y-axis draw function\r\n        let draw = d3.axisLeft(this.yScale).tickSize(-width)\r\n\r\n        // draw the y-axis\r\n        yAxis.append(\"g\")\r\n            .attr(\"class\", \"y-ticks\")\r\n            .attr(\"cursor\", \"none\")\r\n            .attr(\"pointer-events\", \"none\")\r\n            .call(draw)\r\n\r\n        // put a label on the axis\r\n        yAxis.append(\"text\")\r\n            .attr(\"fill\", this.css.labelColor)\r\n            .attr(\"font-size\",this.css.labelFontSize)\r\n            .attr(\"y\",-margin.top/3)\r\n            .attr(\"x\",0)\r\n            .attr(\"text-anchor\", \"start\")\r\n            .text(this.yLabel)\r\n\r\n        // make an invisible rectangle over the axis for zooming behaviour\r\n        yAxis.append(\"rect\")\r\n            .attr(\"x\", `${-margin.left}`).attr(\"y\",0 )\r\n            .attr(\"width\",margin.left).attr(\"height\",height)\r\n            .attr(\"opacity\",0)    \r\n            .attr(\"style\",\"cursor:n-resize\")\r\n            .call(d3.zoom().on(\"zoom\", () => this.zoomYAxisInAxis()))\r\n    }\r\n}\r\n// mixin the drawing methods\r\nObject.assign(chartClass.prototype, xyDrawMethods)\r\n\r\n// mixin the zooming methods\r\nObject.assign(chartClass.prototype, xyZoomMethods)\r\n\r\n// mixin the selection methods\r\nObject.assign(chartClass.prototype, xySelectMethods)\r\n\r\n","import * as d3 from 'd3'\r\n\r\nexport const timeDrawMethods = {\r\n\r\n    drawData(type,points,color){\r\n\r\n        switch(type) {\r\n            case \"line\":    return this.drawLine(points,color)\r\n            case \"bar\":     return this.drawBar(points,color)\r\n            case \"scatter\": return this.drawScatter(points,color)\r\n            case \"area\":    return this.drawArea(points,color)   \r\n        }\r\n    },\r\n\r\n    drawLine(points,color) {\r\n\r\n        // notation\r\n        let xScale = this.xScale\r\n        let yScale = this.yScale\r\n        let xMin = this.xRange.min, xMax = this.xRange.max\r\n        let date = this.date\r\n\r\n        // define a group for the chart area\r\n        let chart = this.chartArea.svg.append(\"g\")\r\n\r\n        // create a line generator - returns a path string  - check if the data fits on the graph first     \r\n        let line = d3.line()\r\n            .defined( d => {if ((d.x > xMax)||(d.x < xMin)) return false; else return true})\r\n            .x ( d => xScale( date.setTime(d.x)) )\r\n            .y ( d => yScale(d.y))\r\n            .curve(d3.curveLinear)\r\n\r\n        // add the line to the chart\r\n        chart.append(\"path\")\r\n            .datum(points)\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", color)\r\n            .attr(\"stroke-linejoin\", \"round\")\r\n            .attr(\"stroke-linecap\", \"round\")\r\n            .attr(\"stroke-width\", 1.5)\r\n            .attr(\"d\", line)\r\n    },\r\n\r\n    drawArea(points,color) {\r\n\r\n        // notation\r\n        const margin = this.css.margin\r\n        let xScale = this.xScale\r\n        let yScale = this.yScale\r\n        let xMin = this.xRange.min, xMax = this.xRange.max\r\n\r\n        // define a group for the chart area\r\n        let chart = this.svg.append(\"g\").attr(\"transform\", `translate( ${margin.left}, ${margin.top})`)\r\n\r\n        // create an area generator\r\n        let area = d3.area()\r\n            .defined( d => {if ((d.x > xMax)||(d.x < xMin)) return false; else return true})\r\n            .x ( d => xScale( date.setTime(d.x)) )\r\n            .y0( d => yScale(0))\r\n            .y1( d => yScale(d.y))\r\n            .curve(d3.curveLinear)\r\n\r\n        // add the line to the chart\r\n        chart.append(\"path\")\r\n            .datum(points)\r\n            .attr(\"fill\", color)\r\n            .attr(\"stroke\", \"none\")\r\n            .attr(\"stroke-linejoin\", \"round\")\r\n            .attr(\"stroke-linecap\", \"round\")\r\n            .attr(\"stroke-width\", 1.5)\r\n            .attr(\"d\", area)           \r\n    },\r\n\r\n    drawScatter(points,color) {\r\n\r\n        // notation\r\n        let xScale = this.xScale\r\n        let yScale = this.yScale\r\n        let xMin = this.xRange.min, xMax = this.xRange.max\r\n        let yMin = this.yRange.min, yMax = this.yRange.max\r\n        let date = this.date\r\n\r\n        // define a group for the chart data \r\n        let chart = this.chartArea.svg.append(\"g\")\r\n\r\n        // the radius of the symbols used\r\n        let radius = this.scatter.symbolSize\r\n\r\n        chart.selectAll(\"circle\")\r\n        .data(points)\r\n        .join(\r\n            enter =>    \r\n                // only draw a circle for data that is on the graph area\r\n                enter.filter( d => {if ((d.x > xMax)||(d.x < xMin)||(d.y > yMax)||(d.y < yMin)) return false; else return true})\r\n                    .append(\"circle\")\r\n                    .attr(\"cx\",  d => xScale(date.setTime(d.x)))\r\n                    .attr(\"cy\",  d => yScale(d.y))\r\n                    .attr(\"r\", radius)\r\n                    .attr(\"fill\",color),\r\n\r\n            // actually - there is no update section !\r\n            update => update.attr(\"fill\",\"red\")\r\n        )\r\n    },\r\n\r\n    drawBar(points,color) {\r\n        // we need at least two points for the bar chart\r\n        if (points.length < 2) return\r\n\r\n        // notation\r\n        let xScale = this.xScale\r\n        let yScale = this.yScale\r\n        \r\n        //let yMin = this.yRange.min, yMax = this.yRange.max\r\n        let date = this.date\r\n\r\n        // define a group for the chart area\r\n        let chart = this.chartArea.svg.append(\"g\")\r\n        let barWidth = xScale(date.setTime(points[1].x)) - xScale(date.setTime(points[0].x))\r\n        let zeroY = yScale(0)\r\n        let zeroX = this.timeType == \"relative\" ? points[0].x : 0\r\n        let xMin = this.xRange.min, xMax = this.xRange.max\r\n\r\n        chart.selectAll(\"rect\")\r\n            .data(points)\r\n            .join(\r\n                enter => enter\r\n                    .filter( d => {if ((d.x - zeroX > xMax)||(d.x - zeroX < xMin)) return false; else return true })                    \r\n                    .append(\"rect\")\r\n                    .attr(\"x\", d=>xScale(date.setTime(d.x - zeroX))-barWidth/2)\r\n                    .attr(\"y\", d=>yScale(d.y))\r\n                    .attr(\"width\",barWidth)\r\n                    .attr(\"height\",d => Math.abs(yScale(d.y) - zeroY) )\r\n                    .attr(\"fill\", color),\r\n\r\n                // actually - there is no update section !\r\n                update => update\r\n                    .attr(\"fill\",\"red\")\r\n            )\r\n    },\r\n}","import * as d3 from 'd3'\r\n\r\nexport const timeZoomMethods = {\r\n\r\n    // the zoom callback\r\n    zoomTimeAxis( ) {\r\n        // the source event\r\n        let e = d3.event.sourceEvent\r\n\r\n        // check the event type\r\n        if (e.type == \"wheel\") this.scaleTimeAxis(e, this.xRange )\r\n        else if (e.type == \"mousemove\") this.moveTimeAxis(e, this.xRange)\r\n        else return\r\n\r\n        // redraw\r\n        this.drawAll()\r\n    },\r\n\r\n    scaleTimeAxis(e, range) {\r\n        // select a scale factor\r\n        let k = +e.wheelDelta > 0 ? 0.9 : 1.1\r\n\r\n        // get the range equivalent of the pixel position of the cursor\r\n        let cursor = this.xScale.invert(+e.offsetX - this.css.margin.left)\r\n\r\n        let c = cursor.getTime()\r\n        let a = range.min \r\n        let b = range.max\r\n\r\n        // check - a scale of 10 ms is the smallest\r\n        if ((b-a < 10)&&(k<1)) return\r\n\r\n        // c stays where it was\r\n        range.min =  k*(a-c) + c \r\n        range.max =  k*(b-c) + c \r\n    },\r\n\r\n    moveTimeAxis( e, range) {\r\n        // get the move\r\n        let move = this.xScale.invert(e.movementX).getTime() - this.xScale.invert(0).getTime()\r\n        range.min -= move\r\n        range.max -= move\r\n    },\r\n\r\n    zoomXY() {\r\n        // the source event\r\n        let e = d3.event.sourceEvent\r\n\r\n        // check the event type\r\n        if (e.type == \"wheel\") this.scaleYAxis(e, this.yRange )\r\n        else if (e.type == \"mousemove\") this.moveXY(e, this.xRange, this.yRange)\r\n        else return\r\n\r\n        // and draw the chart\r\n        this.drawAll()\r\n    },\r\n\r\n    moveXY(e,xRange, yRange) {\r\n        // get the time move\r\n        let move = this.xScale.invert(e.movementX).getTime() - this.xScale.invert(0).getTime()\r\n        xRange.min -= move\r\n        xRange.max -= move\r\n\r\n        // get the y-move\r\n        move = this.yScale.invert(e.movementY) - this.yScale.invert(0)\r\n        yRange.min -= move\r\n        yRange.max -= move\r\n    }\r\n}","import * as d3 from 'd3'\r\nimport {chartClass} from './xy-chart.js'\r\nimport {timeDrawMethods } from './time-chart-draw'\r\nimport {timeZoomMethods } from './time-chart-zoom'\r\n\r\n// A class for a timechart\r\n// The x-value for the time chart are the nr of ms in a date object\r\n// Note that we do not store javascript Date objects for each data point, \r\n// but only the number of ms since January 1, 1970, UTC\r\n// Time format is as described in d3.js \"%Y-%m-%dT%H:%M:%S.%LZ\"\r\n// relative time starts at 0, absolute time starts at the current date = Date.now()\r\n\r\nexport class timeChartClass extends chartClass{                \r\n\r\n    constructor(svgId){\r\n\r\n        // call the super constructor\r\n        super(svgId)\r\n\r\n        // a date object used in calculations\r\n        this.date = new Date()\r\n\r\n        // the function to draw a time axis\r\n        this.timeAxis = {\r\n            ticks: null,\r\n            format: \"\",\r\n            label: \"\"\r\n        }\r\n        // a default time format\r\n        this.timeFormat = \"%H:%M:%S\"\r\n\r\n        // default time type - can be relative or absolute\r\n        this.timeType = \"relative\"\r\n\r\n        // the default range\r\n        this.xRange = { min: Date.now(), max: Date.now() + 60000 }\r\n    }\r\n\r\n    setTimeFormat(type, format) {\r\n\r\n        // check\r\n        if ((type == \"relative\")||(type == \"absolute\")) this.timeType = type\r\n        else console.log(\"INVALID TIME TYPE:\", type)\r\n\r\n        // check\r\n        if ( (d3.timeParse(format)) == null)  console.log(\"INVALID TIME FORMAT:\", format)\r\n        else this.timeFormat = format\r\n    }\r\n\r\n    setTimeRange(minStr, maxStr) {\r\n        // get a parsing function\r\n        let parse = d3.timeParse(this.timeFormat)\r\n\r\n        // get the delta of the current format\r\n        let delta = parse( maxStr ).getTime() - parse( minStr ).getTime()\r\n\r\n        // the range is different for relative and absolute time\r\n        this.xRange.min = this.timeType == \"relative\" ? 0 : Date.now()\r\n\r\n        // also change the max setting\r\n        this.xRange.max = this.xRange.min + delta\r\n    }\r\n\r\n    createxScale(){\r\n        // convert to date object\r\n        let min = new Date(this.xRange.min)\r\n        let max = new Date(this.xRange.max)\r\n\r\n        // the locals\r\n        let format = \"\"\r\n        let ticks = 0\r\n        let label = \"\"\r\n\r\n        // I count the hours since you went away - I count the minutes and the seconds too\r\n        // determine the type of scale we will show - day week month year\r\n        let nrOfDays = d3.timeDay.count(min, max)\r\n        if (nrOfDays > 1) {\r\n            if (nrOfDays > 3650) format = \"%y\", ticks = d3.timeYear.every(5), label = \"year\"\r\n            else if (nrOfDays > 730) format = \"%Y\", ticks = d3.timeYear.every(1), label = \"year\"\r\n            else if (nrOfDays > 365) format = \"%b'%y\", ticks = d3.timeMonth.every(3), label = \"month\"\r\n            else if (nrOfDays > 60) format = \"%b\", ticks = d3.timeMonth.every(1), label = \"month\"\r\n            else if (nrOfDays > 10) format = \"%a\", ticks = d3.timeDay.every(7), label = \"day\"\r\n            else if (nrOfDays >  1) format = \"%a\", ticks = d3.timeDay.every(1), label = \"day\"\r\n        }\r\n        else {\r\n            // count the nr of hours\r\n            let nrOfHours = d3.timeHour.count(min, max)\r\n            if (nrOfHours > 12) format = \"%H\", ticks = d3.timeHour.every(3), label = \"hr\"\r\n            else if (nrOfHours > 2) format = \"%H\", ticks = d3.timeHour.every(1), label = \"hr\"\r\n            // count the minutes\r\n            else {\r\n                let nrOfMinutes = d3.timeMinute.count(min, max)\r\n                if (nrOfMinutes > 30) format = \"%M\", ticks = d3.timeMinute.every(15), label = \"min\"\r\n                else if (nrOfMinutes > 15) format = \"%M\", ticks = d3.timeMinute.every(5), label = \"min\"\r\n                else if (nrOfMinutes > 2) format = \"%M\", ticks = d3.timeMinute.every(1), label = \"min\"\r\n                else {\r\n                    // count the seconds\r\n                    let nrOfSeconds = d3.timeSecond.count(min, max)\r\n                    if (nrOfSeconds > 60) format = \"%S\", ticks = d3.timeSecond.every(15), label = \"sec\"\r\n                    else if (nrOfSeconds > 30) format = \"%S\", ticks = d3.timeSecond.every(10), label = \"sec\"\r\n                    else if (nrOfSeconds > 15) format = \"%S\", ticks = d3.timeSecond.every(5), label = \"sec\"\r\n                    else if (nrOfSeconds > 1) format = \"%S\", ticks = d3.timeSecond.every(1), label = \"sec\"\r\n                    else {\r\n                        // count the ms\r\n                        let nrOfms = d3.timeMillisecond.count(min, max)\r\n                        if (nrOfms > 150) format = \"%L\", ticks = d3.timeMillisecond.every(100), label = \"msec\"\r\n                        else if (nrOfms > 15) format = \"%L\", ticks = d3.timeMillisecond.every(10), label = \"msec\"\r\n                        else format = \"%L\", ticks = d3.timeMillisecond.every(1), label = \"msec\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // save the results\r\n        this.timeAxis.ticks = ticks\r\n        this.timeAxis.format = format\r\n        this.timeAxis.label = label\r\n\r\n        // set the scale for the x-axis\r\n        this.xScale = d3.scaleTime()\r\n            .range([0,this.chartArea.width])\r\n            .domain([min, max])\r\n\r\n        return true\r\n    }\r\n\r\n    drawxAxis() {\r\n        // shorter notation\r\n        const width = this.chartArea.width\r\n        const height = this.chartArea.height\r\n        const margin = this.css.margin        \r\n        \r\n        // append a group for the axis\r\n        const xAxis = this.svg.append(\"g\")\r\n            .attr(\"class\", \"x-axis\")\r\n            .attr(\"transform\", `translate( ${margin.left}, ${height + margin.top})`)   \r\n\r\n        // the time axis draw function\r\n        let drawTimeAxis = d3.axisBottom(this.xScale).ticks( this.timeAxis.ticks ).tickFormat(d3.timeFormat( this.timeAxis.format )).tickSize(-height)\r\n\r\n        // draw the x-axis ticks - no selection or any other action on the ticks !\r\n        xAxis.append(\"g\")\r\n            .attr(\"class\", \"x-ticks\")\r\n            .attr(\"cursor\", \"none\")\r\n            .attr(\"pointer-events\", \"none\")\r\n            .call(drawTimeAxis)\r\n\r\n        // put a label on the axis\r\n        xAxis.append(\"text\")\r\n            .attr(\"fill\", this.css.labelColor)\r\n            .attr(\"font-size\",this.css.labelFontSize)\r\n            .attr(\"x\",width - (this.timeAxis.label.length)*5)\r\n            .attr(\"y\",margin.bottom)\r\n            .attr(\"text-anchor\", \"start\")\r\n            .text(this.timeAxis.label)\r\n\r\n        // make an invisible rectangle over the chart + x-axis for the zooming behaviour\r\n        xAxis.append(\"rect\")\r\n            .attr(\"x\", 0).attr(\"y\", 0)\r\n            .attr(\"width\",width).attr(\"height\",margin.bottom)\r\n            .attr(\"opacity\",0)\r\n            .attr(\"style\",\"cursor:e-resize\")\r\n            .call(d3.zoom().on(\"zoom\", () => this.zoomTimeAxis()))\r\n    }\r\n\r\n    shiftIntoView( points ) {\r\n\r\n        let nPoints = points.length\r\n\r\n        // we need at least two points\r\n        if (nPoints < 2) return\r\n\r\n        // see if we have to use an offset\r\n        let xMax = this.xRange.max\r\n        let xZero = this.timeType == \"relative\" ?  points[0].x : 0\r\n\r\n        // if the last point is not visible, but the previous one is - shift time-range by one point\r\n        if ( (xMax < points[nPoints-1].x - xZero) && (xMax >= points[nPoints-2].x - xZero)) {               \r\n            this.xRange.max = points[nPoints-1].x - xZero\r\n            this.xRange.min += this.xRange.max - xMax \r\n        }\r\n    }\r\n}\r\n// mixin the drawing methods\r\nObject.assign(timeChartClass.prototype, timeDrawMethods)\r\n\r\n// mixin the zooming methods\r\nObject.assign(timeChartClass.prototype, timeZoomMethods)\r\n\r\n\r\n\r\n","import * as d3 from 'd3'\r\n/*\r\n    layout\r\n        background\r\n        rect\r\n        fontSize\r\n        entries[]\r\n            color\r\n            text\r\n*/\r\n\r\n// a class to draw a simple color coded legend on a chart\r\nexport class legendClass {\r\n\r\n    constructor(svg,layout) {\r\n        this.svg = svg                  // the container for the legend\r\n        this.layout = layout            // the legend descriptor\r\n        this.position = {\r\n            x:layout.position.x,\r\n            y:layout.position.y}        // the initial position of the legend in the svg\r\n        this.svgLegend = null           // the resulting svg legend \r\n    }   \r\n\r\n    getColor(index) {\r\n        if ((this.layout.entries) && (index < this.layout.entries.length)) return this.layout.entries[index].color\r\n    }\r\n\r\n    draw() {\r\n\r\n        // if there are no entries, just return\r\n        if (this.layout.entries.length < 1) return\r\n\r\n        // some constants to position the text and boxes in the legend\r\n        const colorBoxSize = 10\r\n        const leftMargin = 5\r\n        const topMargin = 3\r\n        const textWidth = 40\r\n\r\n        // the box for the legend - we make one row of 6 columns\r\n        this.layout.rect.width = (leftMargin + colorBoxSize + leftMargin + textWidth)*6\r\n        this.layout.rect.height = colorBoxSize + 2*topMargin\r\n\r\n        // add a legend to the chart\r\n        this.svgLegend = this.svg.append(\"g\")\r\n           .attr(\"transform\",`translate(${this.position.x},${this.position.y})`)\r\n           .attr(\"class\",\"legend\")\r\n\r\n        // add the empty legend entries\r\n        let entries = this.svgLegend.selectAll(\"g\")\r\n            .data(this.layout.entries)\r\n            .enter()\r\n\r\n       // The rectangle for the legend\r\n       this.svgLegend.append(\"rect\")\r\n           .attr(\"width\", this.layout.rect.width)\r\n           .attr(\"height\", this.layout.rect.height)\r\n           .attr(\"x\",0)\r\n           .attr(\"y\",0)\r\n           .style(\"fill\", this.layout.background)\r\n\r\n        // make a color indicator\r\n        entries.append(\"rect\")\r\n            .attr(\"width\", 10)\r\n            .attr(\"height\", 10)\r\n            .attr(\"x\",function(d,i) { return `${i*(leftMargin + colorBoxSize + leftMargin + textWidth) + leftMargin}px`      })       \r\n            .attr(\"y\",function(d,i) { return `${topMargin}` })      \r\n            .style(\"fill\", function(d,i){return d.color });\r\n   \r\n        // add the label to the color indicator\r\n        entries.append(\"text\")\r\n            .text(function(d,i) {return d.text })\r\n            .attr(\"x\",function(d,i) { return `${i*(leftMargin + colorBoxSize + leftMargin + textWidth) + leftMargin + colorBoxSize + leftMargin}px` })       \r\n            .attr(\"y\",function(d,i) { return `${topMargin + colorBoxSize}`  })\r\n            .attr(\"font-size\",this.layout.fontSize)\r\n \r\n        // set zooming and translation behaviour of the legend\r\n        this.svgLegend.call(d3.zoom()\r\n            .scaleExtent([1 / 4, 16])\r\n            .on(\"zoom\", this.zoom.bind(this)))\r\n        }\r\n\r\n    // The scale and move  function for the legend\r\n    zoom() {   \r\n       // Get the calculated transform scale\r\n       let scale = d3.event.transform.k\r\n\r\n       // get the dx and dy and make new x and y\r\n       this.position.x = this.position.x + d3.event.sourceEvent.movementX\r\n       this.position.y = this.position.y + d3.event.sourceEvent.movementY\r\n\r\n       // build the transform\r\n       let transform = `translate(${this.position.x} ${this.position.y}) scale( ${scale})`\r\n \r\n       // set the transform attribute\r\n       this.svgLegend.attr(\"transform\",transform)\r\n    }\r\n}","export const stats = {\r\n\r\n    spareRandom: null,\r\n\r\n    // This function generates random numbers along a Normal or Log-normal distribution \r\n    // using the Marsaglia polar method. the mean is 0 and the deviation is 1\r\n    // the function generates two values at each invocation - that is why we have the spare\r\n    normalRandom: ()=> {\r\n\r\n        let val, u, v, s, mul;\r\n\r\n        if(stats.spareRandom !== null) {\r\n            val = stats.spareRandom;\r\n            stats.spareRandom = null;\r\n        }\r\n        else {\r\n            do {\r\n                u = Math.random()*2-1;\r\n                v = Math.random()*2-1;\r\n                s = u*u+v*v;\r\n            } while(s === 0 || s >= 1);\r\n            mul = Math.sqrt(-2 * Math.log(s) / s);\r\n            val = u * mul;\r\n            stats.spareRandom = v * mul;\r\n        }\r\n        return val;\r\n    },\r\n\r\n    cumulative: (points, distri) => {\r\n\r\n        // check\r\n        if (points.length != distri.length) return null\r\n\r\n        // copy but swap x and y\r\n        for (let i=0; i < points.length; i++) distri[i].x = points[i].y\r\n\r\n        // sort the array\r\n        distri.sort( (a, b) => a.x - b.x )\r\n\r\n        // change the y values\r\n        for (let i=0; i< distri.length; i++) distri[i].y = i\r\n\r\n        return distri\r\n    },\r\n\r\n    histogram: (points, bins) => {\r\n\r\n        // the nr of buckets\r\n        let nB = bins.length\r\n\r\n        // th nr of points\r\n        let nP = points.length\r\n\r\n        // check\r\n        if (!nP || !nB) return [0,0]\r\n\r\n        // find the min and max\r\n        let xMin=points[0].y, xMax = points[0].y\r\n        for (let i=0; i<nP; i++) {\r\n            if (points[i].y < xMin) xMin = points[i].y\r\n            else if (points[i].y > xMax) xMax = points[i].y\r\n        }\r\n\r\n        // the bin size\r\n        let bSize = (1.1*xMax - 0.9*xMin)/nB\r\n\r\n        // check\r\n        if (bSize == 0) bSize = 1.0\r\n\r\n        // initialize the buckets\r\n        for (let i=0; i<nB;i++) {\r\n            bins[i].x = 0.9*xMin + i*bSize\r\n            bins[i].y = 0\r\n        }\r\n\r\n        // count the objects per bin\r\n        for (let i=0;i<nP;i++) bins[ Math.floor( (points[i].y - 0.9*xMin) / bSize) ].y++\r\n\r\n        // normalize the bins and find the max value\r\n        let yMin = bins[0].y/nP\r\n        let yMax = yMin\r\n        for (let i=0; i<nB; i++) {\r\n            bins[i].y /= nP\r\n            if (bins[i].y < yMin) yMin = bins[i].y\r\n            else if (bins[i].y > yMax) yMax = bins[i].y\r\n        }\r\n\r\n        // return the min and max value\r\n        return [xMin, xMax, yMin, yMax]\r\n    },\r\n\r\n    constValue: (points,xmin, xmax, value) => {\r\n\r\n        // check and swap if necessary\r\n        if (xmin > xmax) { let tmp = xmin; xmin = xmax; xmax = tmp}\r\n\r\n        // fill the array with the constant value\r\n        for (let i = 0; i <= xmax-xmin; i++) {\r\n            points[i].x = xmin + i\r\n            points[i].y = value\r\n        }\r\n    },\r\n\r\n    rndNormal: (points, xmin, xmax, mu, sigma) => {\r\n        // check and swap if necessary\r\n        if (xmin > xmax) { let tmp = xmin; xmin = xmax; xmax = tmp}\r\n        \r\n        // calculate\r\n        for (let i = 0; i <= xmax-xmin; i++) {\r\n            points[i].x = xmin + i\r\n            points[i].y = normalRandom()*sigma + mu\r\n        }\r\n    },\r\n\r\n    rndUniform: ( points, xmin, xmax, a, b ) => {\r\n        // check and swap if necessary\r\n        if (xmin > xmax) { let tmp = xmin; xmin = xmax; xmax = tmp}\r\n\r\n        // generate the random numbers\r\n        for (let i = 0; i <= xmax-xmin; i++) {\r\n            points[i].x = xmin + i\r\n            points[i].y = (Math.random() * (b-a)) + a\r\n        }\r\n    },\r\n}\r\n\r\n","export const fx = {\r\n    nValues: (points,stepCount, stepSize) => {\r\n\r\n        let stepLength = Math.floor(points.length / stepCount)\r\n        let i,step\r\n\r\n        // fill the array with the steps\r\n        for (step = 0; step < stepCount; step++) {\r\n            for (i = step*stepLength; i < (step+1)*stepLength; i++) {\r\n\r\n                points[i].x = i\r\n                points[i].y = (step+1)*stepSize\r\n            }\r\n        }\r\n\r\n        // fill any remaning entries with the last value (note that step was incremented)\r\n        while (i < points.length) {\r\n            points[i].x = i\r\n            points[i].y = step*stepSize\r\n            i++\r\n        }\r\n\r\n        return true\r\n    },\r\n\r\n    linear: (points,slope) => {\r\n\r\n        for (let i = 0; i < points.length; i++) {\r\n            points[i].x = i\r\n            points[i].y = slope*i\r\n        }\r\n        return true\r\n    },\r\n\r\n    squareWave: (points, offset, amplitude, period) => {\r\n\r\n        console.log(offset, amplitude, period)\r\n        let up = true\r\n        let count = 0\r\n        for (let i = 0; i < points.length; i++) {\r\n            points[i].x = i\r\n            if (up) points[i].y = offset + amplitude\r\n            else points[i].y = offset - amplitude\r\n\r\n            if (count > period/2) {up = !up; count = 0;}\r\n            count++\r\n        }\r\n        return true\r\n        \r\n    },\r\n\r\n    sine: (points, xmin, xmax) => {},\r\n\r\n    findRange: ( data ) => {\r\n        if (data.length < 1) return {min:0, max:0}\r\n        let min = data[0].y , max = data[0].y\r\n        for (let i=0; i < data.length; i++) {\r\n            if (data[i].y < min) min = data[i].y\r\n            else if (data[i].y > max) max = data[i].y\r\n        }\r\n        return {min, max}\r\n    }\r\n}"],"names":["d3.line","d3.curveLinear","d3.area","d3.event","d3.drag","d3.zoom","d3.select","d3.scaleLinear","d3.axisBottom","d3.axisLeft","d3.timeParse","d3.timeDay","d3.timeYear","d3.timeMonth","d3.timeHour","d3.timeMinute","d3.timeSecond","d3.timeMillisecond","d3.scaleTime","d3.timeFormat"],"mappings":"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"}