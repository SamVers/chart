{"version":3,"file":"chart.js","sources":["xy-chart-draw.js","xy-chart-zoom.js","xy-chart-select.js","xy-chart.js","time-chart-draw.js","time-chart-zoom.js","time-chart.js","legend.js","stats.js","fx.js"],"sourcesContent":["import * as d3 from 'd3'\r\n\r\nexport const xyDrawMethods = {\r\n\r\n    drawData(type,points,color){\r\n\r\n        switch(type) {\r\n            case \"line\":    return this.drawLine(points,color)\r\n            case \"bar\":     return this.drawBar(points,color)\r\n            case \"scatter\": return this.drawScatter(points,color)\r\n            case \"area\":    return this.drawArea(points,color)   \r\n        }\r\n    },\r\n\r\n    drawLine(points,color) {\r\n\r\n        // notation\r\n        let xScale = this.xScale\r\n        let yScale = this.yScale\r\n        let xMin = this.xRange.min, xMax = this.xRange.max\r\n\r\n        // define a group for the chart area\r\n        let chart = this.chartArea.svg.append(\"g\")\r\n\r\n        // create a line generator - returns a path string  - check if the data fits on the graph first     \r\n        \r\n        let line = d3.line()\r\n            .defined( d => {if ((d.x > xMax)||(d.x < xMin)) return false; else return true})\r\n            .x ( d => xScale(d.x))\r\n            .y ( d => yScale(d.y))\r\n            .curve(d3.curveLinear)\r\n\r\n        // add the line to the chart\r\n        chart.append(\"path\")\r\n            .datum(points)\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", color)\r\n            .attr(\"stroke-linejoin\", \"round\")\r\n            .attr(\"stroke-linecap\", \"round\")\r\n            .attr(\"stroke-width\", 1.5)\r\n            .attr(\"d\", line)\r\n    },\r\n \r\n    drawArea(points,color) {\r\n\r\n        // notation\r\n        const margin = this.css.margin\r\n        let xScale = this.xScale\r\n        let yScale = this.yScale\r\n        let xMin = this.xRange.min, xMax = this.xRange.max\r\n\r\n        // define a group for the chart area\r\n        let chart = this.svg.append(\"g\").attr(\"transform\", `translate( ${margin.left}, ${margin.top})`)\r\n\r\n        // create an area generator\r\n        let area = d3.area()\r\n            .defined( d => {if ((d.x > xMax)||(d.x < xMin)) return false; else return true})\r\n            .x(  d => xScale(d.x) )\r\n            .y0( d => yScale(0))\r\n            .y1( d => yScale(d.y))\r\n            .curve(d3.curveLinear)\r\n\r\n        // add the line to the chart\r\n        chart.append(\"path\")\r\n            .datum(points)\r\n            .attr(\"fill\", color)\r\n            .attr(\"stroke\", \"none\")\r\n            .attr(\"stroke-linejoin\", \"round\")\r\n            .attr(\"stroke-linecap\", \"round\")\r\n            .attr(\"stroke-width\", 1.5)\r\n            .attr(\"d\", area)           \r\n    },\r\n\r\n    // in low x-resolution discrete functions are drawn with little circles\r\n    drawScatter(points,color) {\r\n\r\n        // notation\r\n        let xScale = this.xScale\r\n        let yScale = this.yScale\r\n        let xMin = this.xRange.min, xMax = this.xRange.max\r\n        let yMin = this.yRange.min, yMax = this.yRange.max\r\n\r\n        // define a group for the chart data \r\n        let chart = this.chartArea.svg.append(\"g\")\r\n\r\n        // the radius of the symbols used\r\n        let radius = this.scatter.symbolSize\r\n\r\n        chart.selectAll(\"circle\")\r\n        .data(points)\r\n        .join(\r\n            enter =>    \r\n                // only draw a circle for data that is on the graph area\r\n                enter.filter( d => {if ((d.x > xMax)||(d.x < xMin)||(d.y > yMax)||(d.y < yMin)) return false; else return true})\r\n                    .append(\"circle\")\r\n                    .attr(\"cx\",  d => xScale(d.x))\r\n                    .attr(\"cy\",  d => yScale(d.y))\r\n                    .attr(\"r\", radius)\r\n                    .attr(\"fill\",color),\r\n\r\n            // actually - there is no update section !\r\n            update => update.attr(\"fill\",\"red\")\r\n        )\r\n    },\r\n\r\n    drawBar(points,color) {\r\n\r\n        if (points.length < 2) return\r\n        \r\n        // notation\r\n        //const margin = this.css.margin\r\n        let xScale = this.xScale\r\n        let yScale = this.yScale\r\n        let xMin = this.xRange.min, xMax = this.xRange.max\r\n        //let yMin = this.yRange.min, yMax = this.yRange.max\r\n\r\n        // define a group for the chart area\r\n        let chart = this.chartArea.svg.append(\"g\")\r\n        let barWidth = xScale(points[1].x) - xScale(points[0].x)\r\n        let zeroY = yScale(0)\r\n        let opacity = 1 - (this.dataSeries.length - 1)*0.1\r\n\r\n        chart.selectAll(\"rect\")\r\n            .data(points)\r\n            .join(\r\n                enter => enter\r\n                    .filter( d => {if ((d.x > xMax)||(d.x < xMin)) return false; else return true })                    \r\n                    .append(\"rect\")\r\n                    .attr(\"x\", d=>xScale(d.x)-barWidth/2)\r\n                    .attr(\"y\", d=>yScale(d.y))\r\n                    .attr(\"width\",barWidth)\r\n                    .attr(\"height\",d => Math.abs(yScale(d.y) - zeroY) )\r\n                    .attr(\"fill\", color)\r\n                    .attr(\"opacity\",opacity),\r\n\r\n                // actually - there is no update section !\r\n                update => update.attr(\"fill\",\"red\")\r\n            )\r\n    },\r\n}","import * as d3 from 'd3'\r\n\r\nexport const xyZoomMethods = {\r\n\r\n    // the zoom callback\r\n    zoomXAxis( ) {\r\n\r\n        // the source event\r\n        let e = d3.event.sourceEvent\r\n\r\n        // check the event type\r\n        if (e.type == \"wheel\") this.scaleXAxis(e, this.xRange )\r\n        else if (e.type == \"mousemove\") this.moveXAxis(e, this.xRange)\r\n        else return\r\n\r\n        // we can display the new range as a line or seperate points - set the corresponding draw function\r\n        // this.drawData = (this.xRange.max - this.xRange.min < this.scatter.limit) ? this.drawScatter : this.drawLine\r\n\r\n        // redraw\r\n        this.drawAll()\r\n    },\r\n\r\n    scaleXAxis(e, range) {\r\n\r\n        // select a scale factor\r\n        let k = +e.wheelDelta > 0 ? 0.9 : 1.1\r\n\r\n        // get the range equivalent of the pixel position of the cursor\r\n        let cursor = this.xScale.invert(+e.offsetX - this.css.margin.left)\r\n\r\n        // adapt the range\r\n        range.min = k*(range.min - cursor) + cursor\r\n        range.max = k*(range.max - cursor) + cursor\r\n    },\r\n\r\n    moveXAxis( e, range) {\r\n\r\n        let move = this.xScale.invert(e.movementX) - this.xScale.invert(0)\r\n        range.min -= move\r\n        range.max -= move\r\n    },\r\n\r\n    // the zoom callback\r\n    zoomYAxis( ) {\r\n\r\n        // the source event\r\n        let e = d3.event.sourceEvent\r\n\r\n        // check the event type\r\n        if (e.type == \"wheel\") this.scaleYAxis(e, this.yRange )\r\n        else if (e.type == \"mousemove\") this.moveYAxis(e, this.yRange)\r\n        else return\r\n\r\n        // and draw the chart\r\n        this.drawAll()\r\n    },\r\n\r\n    // the zoom callback for zooming when the cursor is in the axis\r\n    zoomYAxisInAxis( ) {\r\n\r\n        // the source event\r\n        let e = d3.event.sourceEvent\r\n\r\n        // check the event type\r\n        if (e.type == \"wheel\") this.scaleYAxisAroundCursor(e, this.yRange )\r\n        else if (e.type == \"mousemove\") this.moveYAxis(e, this.yRange)\r\n        else return\r\n\r\n        // and draw the chart\r\n        this.drawAll()\r\n    },\r\n\r\n    scaleYAxis(e, range) {\r\n\r\n        // select a scale factor\r\n        let k = +e.wheelDelta > 0 ? 0.9 : 1.1\r\n\r\n        // get the range equivalent of the pixel position of the cursor\r\n        let cursor = this.yScale.invert(e.offsetY - this.css.margin.top) \r\n    \r\n        // adjust the range\r\n        //range.min = k*(range.min - cursor) + cursor\r\n        //range.max = k*(range.max - cursor) + cursor\r\n        range.max = k*range.max\r\n    },\r\n\r\n    // the value under the cursor is kept central\r\n    scaleYAxisAroundCursor(e, range) {\r\n\r\n        // select a scale factor\r\n        let k = +e.wheelDelta > 0 ? 0.9 : 1.1\r\n\r\n        // get the range equivalent of the pixel position of the cursor\r\n        let cursor = this.yScale.invert(e.offsetY - this.css.margin.top) \r\n    \r\n        // adjust the range\r\n        range.min = k*(range.min - cursor) + cursor\r\n        range.max = k*(range.max - cursor) + cursor\r\n    },\r\n\r\n    moveYAxis(e, range) {\r\n\r\n        let move = this.yScale.invert(e.movementY) - this.yScale.invert(0)\r\n        range.min -= move\r\n        range.max -= move\r\n    },\r\n\r\n    zoomXY() {\r\n        // the source event\r\n        let e = d3.event.sourceEvent\r\n\r\n        // check the event type\r\n        if (e.type == \"wheel\") this.scaleYAxis(e, this.yRange )\r\n        else if (e.type == \"mousemove\") this.moveXY(e, this.xRange, this.yRange)\r\n        else return\r\n\r\n        // and draw the chart\r\n        this.drawAll()\r\n    },\r\n\r\n    moveXY(e,xRange, yRange) {\r\n\r\n        let move = this.xScale.invert(e.movementX) - this.xScale.invert(0)\r\n        xRange.min -= move\r\n        xRange.max -= move\r\n\r\n        move = this.yScale.invert(e.movementY) - this.yScale.invert(0)\r\n        yRange.min -= move\r\n        yRange.max -= move\r\n    }\r\n}","import * as d3 from 'd3'\r\n\r\nexport const xySelectMethods = {\r\n\r\n    makeSelectBox() {\r\n\r\n        this.chartArea.svg\r\n        .attr(\"style\",\"cursor:crosshair\")\r\n        .call(d3.drag()\r\n            .on(\"start\", (d)=>this.startSelectBox(d))\r\n            .on(\"drag\",  (d)=>this.growSelectBox(d))\r\n            .on(\"end\",   (d)=>this.stopSelectBox(d)))\r\n        .call(d3.zoom().on(\"zoom\", () => this.zoomYAxis()))\r\n\r\n        // prepare the slection rectangle - size 0\r\n        this.chartArea.selectBox = this.chartArea.svg.append(\"rect\")           \r\n            .attr(\"x\", 0).attr(\"y\", 0).attr(\"width\",0).attr(\"height\",0)\r\n            .attr(\"visibility\",\"hidden\")    \r\n            .attr(\"fill\",this.css.selectBoxColor)\r\n            .attr(\"style\",\"cursor:grab\")\r\n    },\r\n\r\n    // Drag functions to make a select box\r\n    startSelectBox(d) {\r\n        // postition the select box under the cursor\r\n        this.chartArea.selectBox\r\n            .attr(\"x\", d3.event.x)\r\n            .attr(\"y\", d3.event.y)\r\n            .attr(\"width\",0)\r\n            .attr(\"height\",0)\r\n            .attr(\"visibility\",\"visible\")   \r\n            .attr(\"transform\", \"translate( 0 0 )\") \r\n    },\r\n    \r\n    growSelectBox(d) {\r\n        let x = +d3.event.subject.x \r\n        let y = +d3.event.subject.y \r\n        let w = +d3.event.x - x \r\n        let h = +d3.event.y - y\r\n\r\n        // The box can grow in four directions - but svg bx is defined by left upper corner !\r\n        if (w > 0) {\r\n            if ( h > 0)\r\n                this.chartArea.selectBox.attr(\"width\",w).attr(\"height\",h)\r\n            else \r\n                this.chartArea.selectBox.attr(\"y\", y + h).attr(\"width\",w).attr(\"height\",-h)\r\n        }\r\n        else {\r\n            if (h > 0) \r\n                this.chartArea.selectBox.attr(\"x\", x + w).attr(\"width\",-w).attr(\"height\",h)\r\n            else \r\n                this.chartArea.selectBox.attr(\"x\", x + w).attr(\"y\", y + h).attr(\"width\",-w).attr(\"height\",-h)               \r\n        }\r\n    },\r\n    \r\n    stopSelectBox(d) {\r\n\r\n        // set the drag callbacks for the selectbox\r\n        this.chartArea.selectBox\r\n            .call(d3.drag()\r\n            .on(\"start\", (d)=>this.grabSelectBox(d))\r\n            .on(\"drag\", (d)=>this.moveSelectBox(d))\r\n            .on(\"end\", (d)=>this.releaseSelectBox(d)));       \r\n    },\r\n\r\n    // we replace some of the drag reactors\r\n    grabSelectBox(d) {\r\n\r\n        // change the cursor\r\n        this.chartArea.selectBox.attr(\"style\",\"cursor:grabbing\")\r\n\r\n        // notation\r\n        let selectBox = this.chartArea.selectBox\r\n\r\n        // get the x-dimensions of the box and chart\r\n        let boxWidth = +selectBox.attr(\"width\")\r\n        let boxX = +selectBox.attr(\"x\")\r\n\r\n        // calculate the x selection\r\n        this.xSelect.min = Math.floor(this.xScale.invert( boxX )) + 1\r\n        this.xSelect.max = Math.floor(this.xScale.invert( boxX + boxWidth))\r\n\r\n        // get the y-dimensions and the \r\n        let boxHeight = +selectBox.attr(\"height\")\r\n        let boxY = +selectBox.attr(\"y\")\r\n\r\n        // calculate the y selection\r\n        this.ySelect.min = this.yScale.invert(boxY + boxHeight) \r\n        this.ySelect.max = this.yScale.invert(boxY)\r\n\r\n        // create the selected ranges for the function\r\n        this.searchIntervals()\r\n\r\n        // set the saved yMove to zero !\r\n        this.yMoveSave = 0\r\n    },\r\n\r\n    moveSelectBox(d) {\r\n\r\n        // we only move in the y-direction\r\n        let pixelMove = d3.event.y - d3.event.subject.y\r\n\r\n        // set the new y position of the rectangle\r\n        this.chartArea.selectBox.attr(\"transform\", \"translate( 0 \" + pixelMove + \")\")\r\n\r\n        // now move the data in the ranges over the required distance\r\n        let yMove = this.yScale.invert(d3.event.y) - this.yScale.invert(d3.event.subject.y)\r\n\r\n        // difference between current move and previous move \r\n        let deltaY = yMove - this.yMoveSave\r\n\r\n        // notation\r\n        let points = this.data[0].points\r\n        let nI, Interval, i\r\n\r\n        // adjust y in all intervals\r\n        for (nI=0; nI < this.xIntervals.length; nI++) {          \r\n            Interval = this.xIntervals[nI]\r\n            for (i= Interval.from; i <= Interval.to; i++) {               \r\n                points[i].y += deltaY\r\n            }\r\n        }\r\n\r\n        // save the move that was applied for the next time\r\n        this.yMoveSave = yMove\r\n\r\n        // redraw the data\r\n        this.redrawData()\r\n    },\r\n\r\n    releaseSelectBox(d) {\r\n\r\n        //set the transform to zero\r\n        this.chartArea.selectBox.attr(\"transform\", \"translate ( 0 0 )\")\r\n\r\n        // get the original position before the grab started\r\n        let y = +this.chartArea.selectBox.attr(\"y\")\r\n\r\n        // get the move in pixels\r\n        let pixelMove = d3.event.y - d3.event.subject.y\r\n\r\n        // and set the rectangle at its new position\r\n        this.chartArea.selectBox.attr(\"y\", y + pixelMove)\r\n\r\n        // change the cursor\r\n        this.chartArea.selectBox.attr(\"style\",\"cursor:grab\")\r\n    },\r\n\r\n    searchIntervals() {\r\n        \r\n        // reset the current array of intervals\r\n        this.xIntervals.length = 0\r\n\r\n        // check\r\n        if ( ! this.haveData() ) return\r\n\r\n        // notation\r\n        let d = this.data[0].points\r\n        let xr = this.xSelect\r\n        let yr = this.ySelect\r\n        let i,j\r\n\r\n        i = xr.min\r\n        while(true) {\r\n            // search the start of an interval\r\n            for ( ; i <= xr.max; i++ ) if (( d[i].y > yr.min ) && ( d[i].y < yr.max )) break\r\n            \r\n            // check if at the end of the range\r\n            if (i > xr.max) break\r\n\r\n            // search the end of an interval\r\n            for ( j = i; j <= xr.max; j++ ) if (( d[j].y < yr.min ) || ( d[j].y > yr.max )) break\r\n            \r\n            // we have an interval\r\n            this.xIntervals.push({from:i,to:j-1})        \r\n            \r\n            // check if at the end of the range\r\n            if (j > xr.max) break; else i = j                    \r\n        }\r\n    }   \r\n}","import * as d3 from 'd3'\r\nimport {xyDrawMethods } from './xy-chart-draw'\r\nimport {xyZoomMethods } from './xy-chart-zoom'\r\nimport {xySelectMethods } from './xy-chart-select'\r\n\r\n// A class to display a function\r\nexport class chartClass {                \r\n\r\n    constructor(svgId){\r\n\r\n        // get the svg\r\n        let svg = d3.select(\"#\" + svgId)\r\n\r\n        // check\r\n        if (svg == null) return\r\n\r\n        this.svg = svg                  // the container for the chart\r\n        this.position = {x: 0,y: 0}     // position in the container\r\n        this.legend = null              // the legend class\r\n        this.xLabel = \"\"\r\n        this.xRange = {min:0,max:1}     // x range\r\n        this.xScale = null              // x-axis scale function\r\n        this.yLabel = \"\"\r\n        this.yRange = {min:0,max:1}     // y-range\r\n        this.yScale = null              // y-axis scale function\r\n        this.dataSeries = []            // data objects - each object has a name + color + data points \r\n        this.chartArea = {              // the svg for the chart area (change cursor etc)\r\n            width : 0,\r\n            height : 0,\r\n            svg:null,                   // the svg of the chartArea\r\n            allowSelection:false,       // allows or denies selections in the chart area\r\n            selectBox:null,             // a rectangle to select in the chart\r\n        }\r\n\r\n        // the x-and y-range that correspond with the selection\r\n        this.xSelect = {min:0, max:0}\r\n        this.ySelect = {min:0, max:0}\r\n\r\n        // the limit to draw individual points\r\n        this.scatter = {limit:25, symbolSize:2}\r\n\r\n        // only the y values that are in the box are selected\r\n        // so it could be that the selected range is cut up in several intervals\r\n        this.xIntervals = []\r\n\r\n        // while moving the selection box we keep track of the previous move\r\n        this.yMove = 0\r\n\r\n        // The css settings that this chart uses\r\n        this.css = {\r\n            margin:{ top:0,right:0,bottom:0,left:0},        // the margin for the axes and labels\r\n            labelFontSize: null,\r\n            labelColor: null,\r\n            defaultDataColor: null,\r\n            chartBackground: null,\r\n            selectBoxColor: null,\r\n        }\r\n\r\n        // get the CSS settings \r\n        this.getCSS(svg)\r\n    }\r\n\r\n    getCSS(svg) {\r\n\r\n        // get the computed style\r\n        let style = getComputedStyle( svg.node() )\r\n\r\n        // check\r\n        if (style == null) return;\r\n\r\n        // notations\r\n        let css = this.css\r\n\r\n        // get the margin setting\r\n        let marginString = style.getPropertyValue(\"--chart-margin\")\r\n\r\n        // check\r\n        if (marginString ) {\r\n            // regular expression for a floating point number\r\n            let regex = /[+-]?[0-9]*\\.?[0-9]+/g\r\n\r\n            // parse the margin settings\r\n            let marginArray = marginString.match(regex)\r\n\r\n            // set the margin\r\n            css.margin.top = +marginArray[0]\r\n            css.margin.right = +marginArray[1]\r\n            css.margin.bottom = +marginArray[2]\r\n            css.margin.left = +marginArray[3]\r\n        }\r\n\r\n        // getPropertyValue returns a string with quotes around it (stringify) !!!!!\r\n        let prop = (p) => { return JSON.parse( style.getPropertyValue( p ) ) }\r\n\r\n        // get the other values\r\n        css.labelFontSize = prop(\"--chart-lblsz\")\r\n        css.labelColor = prop(\"--chart-lblclr\")\r\n        css.defaultDataColor = prop(\"--chart-dataclr\")\r\n        css.chartBackground = prop(\"--chart-bckgrnd\")\r\n        css.selectBoxColor = prop(\"--chart-selectclr\")\r\n    }\r\n\r\n    // a simple function to check if we have data\r\n    haveData() {\r\n        if ((this.data.length < 1)||(this.data[0].points == null)||(this.data[0].points.length < 1)) return false\r\n        else return true\r\n    }\r\n\r\n    // redraws the entire chart - most often because of a scale change\r\n    drawAll(){\r\n\r\n        // clean up the current chart\r\n        this.svg.selectAll(\"g\").remove()\r\n\r\n        // create an svg for the chart area\r\n        this.addChartArea()\r\n\r\n        // set the scale for the x axis\r\n        this.createxScale()\r\n\r\n        // set the scale for the y-axis\r\n        this.createyScale()\r\n\r\n        // if there is data to display draw the chart using the y and x scale \r\n        this.drawDataSeries()\r\n\r\n        // now we draw the x-axis\r\n        this.drawxAxis()\r\n\r\n        // draw the y-axis\r\n        this.drawyAxis()\r\n\r\n        // check if the chart needs a legend\r\n        if (this.legend) this.legend.draw()\r\n    }\r\n\r\n    // only draws the data\r\n    drawDataSeries() {\r\n\r\n        // clean up the current graph - ACTUALLY because the g has no id, it gets overwritten anyhow !\r\n        this.chartArea.svg.selectAll(\"g\").remove()\r\n\r\n        // if there is data to display draw the chart using the y and x scale \r\n        if (this.dataSeries.length > 0) this.dataSeries.forEach( (item)=>this.drawData(item.type,item.points,item.color) )\r\n    }\r\n\r\n    // the range can be changed\r\n    setXRange(min, max) {\r\n        this.xRange.min = min\r\n        this.xRange.max = max\r\n        return this\r\n    }\r\n\r\n    setYRange(min, max) {\r\n        this.yRange.min = min\r\n        this.yRange.max = max\r\n        return this\r\n    }\r\n\r\n    adaptXRange(xMin,xMax) {\r\n        let r = this.xRange\r\n        if (xMin < r.min) r.min = xMin\r\n        else if (xMin > r.min*2) r.min = xMin\r\n        if (xMax > r.max) r.max = xMax\r\n        else if (xMax < r.max/2) r.max = xMax\r\n        return this\r\n    }\r\n    adaptYRange(yMin,yMax) {\r\n        let r = this.yRange\r\n        if (yMin < r.min) r.min = yMin\r\n        else if (yMin > r.min*2) r.min = yMin\r\n        if (yMax > r.max) r.max = yMax\r\n        else if (yMax < r.max/2) r.max = yMax\r\n        return this\r\n    }\r\n\r\n    xRangeCheck() {\r\n        let min = this.dataSeries[0][0].x\r\n        let max = min\r\n        for (let i = 0; i < this.dataSeries.length; i++) {\r\n            let n = this.dataSeries[i].length\r\n            if (min > this.dataSeries[i][0].x) min = this.dataSeries[i][0].x\r\n            if (max < this.dataSeries[i][n].x) max = this.dataSeries[i][n].x\r\n        }\r\n        this.adaptXRange(min, max)\r\n        return this\r\n    }\r\n\r\n    yRangeCheck() {\r\n        // only check the y values for which the x is in the range !\r\n        let min = this.dataSeries[0][0].y\r\n        let max = min\r\n        let xr = this.xRange\r\n        for (let i = 0; i < this.dataSeries.length; i++) {\r\n            let n = this.dataSeries[i].length\r\n            for (let j = 0; j < n; j++) {\r\n                let p = this.dataSeries[i][j]\r\n                if ((p.x >= xr.min) && (p.x <= xr.max))  {\r\n                    if (min > p.y) min = p.y\r\n                    if (max < p.y) max = p.y\r\n                }\r\n            }\r\n        }\r\n        this.adaptYRange(min, max)\r\n        return this\r\n    }\r\n\r\n    setXLabel(label) { \r\n        this.xLabel = label\r\n        return this\r\n    }\r\n    setYLabel(label) { \r\n        this.yLabel = label\r\n        return this\r\n    }\r\n\r\n    addData(name, type, points, color) {\r\n\r\n        // check if it exists\r\n        for (let i = 0; i < this.dataSeries.length; i++) {\r\n            if (this.dataSeries[i].name == name) {\r\n                this.dataSeries[i].type = type\r\n                this.dataSeries[i].points = points\r\n                this.dataSeries[i].color = color\r\n                return this\r\n            }\r\n        }\r\n\r\n        // not found - add the new series\r\n        this.dataSeries.push({name, type, points, color})\r\n        return this\r\n    }\r\n\r\n    setData(name, type, points, color) {\r\n        this.dataSeries[0] = {name,type,points,color}\r\n        return this\r\n    }\r\n\r\n    addChartArea() {\r\n\r\n        // clean up the current chart\r\n        if (this.chartArea.svg)  this.chartArea.svg.remove()\r\n\r\n        // notation\r\n        let margin = this.css.margin\r\n\r\n        // set the width and height of the chart area based on the containing svg\r\n        let width = +this.svg.property(\"clientWidth\") - margin.left - margin.right\r\n        let height = +this.svg.property(\"clientHeight\") - margin.top - margin.bottom\r\n\r\n        // set the size of the chart area\r\n        this.chartArea.width = width \r\n        this.chartArea.height = height \r\n\r\n        // create an svg for the chart area\r\n        this.chartArea.svg = this.svg.append(\"svg\")\r\n            .attr(\"x\", margin.left)\r\n            .attr(\"y\", margin.top)\r\n            .attr(\"width\",width)\r\n            .attr(\"height\",height)\r\n            .attr(\"style\",\"clip-path: view-box\")\r\n\r\n        // a background rectangle\r\n        this.chartArea.svg.append(\"rect\")\r\n            .attr(\"x\", 0).attr(\"y\", 0)\r\n            .attr(\"width\",this.chartArea.width)\r\n            .attr(\"height\",this.chartArea.height)\r\n            .attr(\"fill\",this.css.chartBackground)           \r\n            .attr(\"opacity\",1)\r\n \r\n        //if selection is allowed..\r\n        if ( this.chartArea.allowSelection) \r\n\r\n            // we add a selection box\r\n            this.makeSelectBox()\r\n        else \r\n            this.chartArea.svg\r\n                .attr(\"style\",\"cursor:move\")\r\n                .call(d3.zoom().on(\"zoom\", () => this.zoomXY()))\r\n    }\r\n\r\n    createxScale(){\r\n        // set the scale for the x-axis\r\n        this.xScale = d3.scaleLinear()\r\n            .range([0,this.chartArea.width])\r\n            .domain([this.xRange.min, this.xRange.max])\r\n\r\n        return true\r\n    }\r\n\r\n    drawxAxis() {\r\n        // shorter notation\r\n        const width = this.chartArea.width\r\n        const height = this.chartArea.height\r\n        const margin = this.css.margin      \r\n\r\n        // append a group for the axis\r\n        const xAxis = this.svg.append(\"g\")\r\n            .attr(\"class\", \"x-axis\")\r\n            .attr(\"transform\", `translate( ${margin.left}, ${height + margin.top})`)       \r\n\r\n        // make the x-axis draw function\r\n        let draw = d3.axisBottom(this.xScale).tickSize(-height)\r\n\r\n        // draw the x-axis ticks - no selection or any other action on the ticks !\r\n        xAxis.append(\"g\")\r\n            .attr(\"class\", \"x-ticks\")\r\n            .attr(\"cursor\", \"none\")\r\n            .attr(\"pointer-events\", \"none\")\r\n            .call(draw)\r\n\r\n        // put a label on the axis\r\n        xAxis.append(\"text\")\r\n            .attr(\"fill\", this.css.labelColor)\r\n            .attr(\"font-size\",this.css.labelFontSize)\r\n            .attr(\"x\",width - (this.xLabel.length)*5)\r\n            .attr(\"y\",margin.bottom - 3)\r\n            .attr(\"text-anchor\", \"start\")\r\n            .text(this.xLabel)\r\n    \r\n        // make an invisible rectangle over the chart + x-axis for the zooming behaviour\r\n        xAxis.append(\"rect\")\r\n            .attr(\"x\", 0).attr(\"y\", 0)\r\n            .attr(\"width\",width)\r\n            .attr(\"height\",margin.bottom)\r\n            .attr(\"opacity\",0)\r\n            .attr(\"style\",\"cursor:e-resize\")\r\n            .call(d3.zoom().on(\"zoom\", () => this.zoomXAxis()))\r\n    }\r\n\r\n    createyScale(){\r\n\r\n        // set the scale for the y-axis\r\n        this.yScale = d3.scaleLinear()\r\n            .range([this.chartArea.height, 0])\r\n            .domain([this.yRange.min, this.yRange.max])\r\n    }\r\n\r\n    drawyAxis(){\r\n\r\n        // notation\r\n        const margin = this.css.margin    \r\n        const width = this.chartArea.width\r\n        const height = this.chartArea.height\r\n\r\n        // create the y-axis group\r\n        const yAxis = this.svg.append(\"g\")\r\n            .attr(\"class\", \"y-axis\")\r\n            .attr(\"transform\", `translate( ${margin.left}, ${margin.top} )`)\r\n        \r\n        // make the y-axis draw function\r\n        let draw = d3.axisLeft(this.yScale).tickSize(-width)\r\n\r\n        // draw the y-axis\r\n        yAxis.append(\"g\")\r\n            .attr(\"class\", \"y-ticks\")\r\n            .attr(\"cursor\", \"none\")\r\n            .attr(\"pointer-events\", \"none\")\r\n            .call(draw)\r\n\r\n        // put a label on the axis\r\n        yAxis.append(\"text\")\r\n            .attr(\"fill\", this.css.labelColor)\r\n            .attr(\"font-size\",this.css.labelFontSize)\r\n            .attr(\"y\",-margin.top/3)\r\n            .attr(\"x\",0)\r\n            .attr(\"text-anchor\", \"start\")\r\n            .text(this.yLabel)\r\n\r\n        // make an invisible rectangle over the axis for zooming behaviour\r\n        yAxis.append(\"rect\")\r\n            .attr(\"x\", `${-margin.left}`).attr(\"y\",0 )\r\n            .attr(\"width\",margin.left).attr(\"height\",height)\r\n            .attr(\"opacity\",0)    \r\n            .attr(\"style\",\"cursor:n-resize\")\r\n            .call(d3.zoom().on(\"zoom\", () => this.zoomYAxisInAxis()))\r\n    }\r\n}\r\n// mixin the drawing methods\r\nObject.assign(chartClass.prototype, xyDrawMethods)\r\n\r\n// mixin the zooming methods\r\nObject.assign(chartClass.prototype, xyZoomMethods)\r\n\r\n// mixin the selection methods\r\nObject.assign(chartClass.prototype, xySelectMethods)\r\n\r\n","import * as d3 from 'd3'\r\n\r\nexport const timeDrawMethods = {\r\n\r\n    drawData(type,points,color){\r\n\r\n        switch(type) {\r\n            case \"line\":    return this.drawLine(points,color)\r\n            case \"bar\":     return this.drawBar(points,color)\r\n            case \"scatter\": return this.drawScatter(points,color)\r\n            case \"area\":    return this.drawArea(points,color)   \r\n        }\r\n    },\r\n\r\n    drawLine(points,color) {\r\n\r\n        // notation\r\n        let xScale = this.xScale\r\n        let yScale = this.yScale\r\n        let xMin = this.xRange.min, xMax = this.xRange.max\r\n        let date = this.date\r\n\r\n        // define a group for the chart area\r\n        let chart = this.chartArea.svg.append(\"g\")\r\n\r\n        // create a line generator - returns a path string  - check if the data fits on the graph first     \r\n        let line = d3.line()\r\n            .defined( d => {if ((d.x > xMax)||(d.x < xMin)) return false; else return true})\r\n            .x ( d => xScale( date.setTime(d.x)) )\r\n            .y ( d => yScale(d.y))\r\n            .curve(d3.curveLinear)\r\n\r\n        // add the line to the chart\r\n        chart.append(\"path\")\r\n            .datum(points)\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", color)\r\n            .attr(\"stroke-linejoin\", \"round\")\r\n            .attr(\"stroke-linecap\", \"round\")\r\n            .attr(\"stroke-width\", 1.5)\r\n            .attr(\"d\", line)\r\n    },\r\n\r\n    drawArea(points,color) {\r\n\r\n        // notation\r\n        const margin = this.css.margin\r\n        let xScale = this.xScale\r\n        let yScale = this.yScale\r\n        let xMin = this.xRange.min, xMax = this.xRange.max\r\n\r\n        // define a group for the chart area\r\n        let chart = this.svg.append(\"g\").attr(\"transform\", `translate( ${margin.left}, ${margin.top})`)\r\n\r\n        // create an area generator\r\n        let area = d3.area()\r\n            .defined( d => {if ((d.x > xMax)||(d.x < xMin)) return false; else return true})\r\n            .x ( d => xScale( date.setTime(d.x)) )\r\n            .y0( d => yScale(0))\r\n            .y1( d => yScale(d.y))\r\n            .curve(d3.curveLinear)\r\n\r\n        // add the line to the chart\r\n        chart.append(\"path\")\r\n            .datum(points)\r\n            .attr(\"fill\", color)\r\n            .attr(\"stroke\", \"none\")\r\n            .attr(\"stroke-linejoin\", \"round\")\r\n            .attr(\"stroke-linecap\", \"round\")\r\n            .attr(\"stroke-width\", 1.5)\r\n            .attr(\"d\", area)           \r\n    },\r\n\r\n    drawScatter(points,color) {\r\n\r\n        // notation\r\n        let xScale = this.xScale\r\n        let yScale = this.yScale\r\n        let xMin = this.xRange.min, xMax = this.xRange.max\r\n        let yMin = this.yRange.min, yMax = this.yRange.max\r\n        let date = this.date\r\n\r\n        // define a group for the chart data \r\n        let chart = this.chartArea.svg.append(\"g\")\r\n\r\n        // the radius of the symbols used\r\n        let radius = this.scatter.symbolSize\r\n\r\n        chart.selectAll(\"circle\")\r\n        .data(points)\r\n        .join(\r\n            enter =>    \r\n                // only draw a circle for data that is on the graph area\r\n                enter.filter( d => {if ((d.x > xMax)||(d.x < xMin)||(d.y > yMax)||(d.y < yMin)) return false; else return true})\r\n                    .append(\"circle\")\r\n                    .attr(\"cx\",  d => xScale(date.setTime(d.x)))\r\n                    .attr(\"cy\",  d => yScale(d.y))\r\n                    .attr(\"r\", radius)\r\n                    .attr(\"fill\",color),\r\n\r\n            // actually - there is no update section !\r\n            update => update.attr(\"fill\",\"red\")\r\n        )\r\n    },\r\n\r\n    drawBar(points,color) {\r\n        // we need at least two points for the bar chart\r\n        if (points.length < 2) return\r\n\r\n        // notation\r\n        let xScale = this.xScale\r\n        let yScale = this.yScale\r\n        \r\n        //let yMin = this.yRange.min, yMax = this.yRange.max\r\n        let date = this.date\r\n\r\n        // define a group for the chart area\r\n        let chart = this.chartArea.svg.append(\"g\")\r\n        let barWidth = xScale(date.setTime(points[1].x)) - xScale(date.setTime(points[0].x))\r\n        let zeroY = yScale(0)\r\n        let zeroX = this.timeType == \"relative\" ? points[0].x : 0\r\n        let xMin = this.xRange.min, xMax = this.xRange.max\r\n\r\n        chart.selectAll(\"rect\")\r\n            .data(points)\r\n            .join(\r\n                enter => enter\r\n                    .filter( d => {if ((d.x - zeroX > xMax)||(d.x - zeroX < xMin)) return false; else return true })                    \r\n                    .append(\"rect\")\r\n                    .attr(\"x\", d=>xScale(date.setTime(d.x - zeroX))-barWidth/2)\r\n                    .attr(\"y\", d=>yScale(d.y))\r\n                    .attr(\"width\",barWidth)\r\n                    .attr(\"height\",d => Math.abs(yScale(d.y) - zeroY) )\r\n                    .attr(\"fill\", color),\r\n\r\n                // actually - there is no update section !\r\n                update => update\r\n                    .attr(\"fill\",\"red\")\r\n            )\r\n    },\r\n}","import * as d3 from 'd3'\r\n\r\nexport const timeZoomMethods = {\r\n\r\n    // the zoom callback\r\n    zoomTimeAxis( ) {\r\n        // the source event\r\n        let e = d3.event.sourceEvent\r\n\r\n        // check the event type\r\n        if (e.type == \"wheel\") this.scaleTimeAxis(e, this.xRange )\r\n        else if (e.type == \"mousemove\") this.moveTimeAxis(e, this.xRange)\r\n        else return\r\n\r\n        // redraw\r\n        this.drawAll()\r\n    },\r\n\r\n    scaleTimeAxis(e, range) {\r\n        // select a scale factor\r\n        let k = +e.wheelDelta > 0 ? 0.9 : 1.1\r\n\r\n        // get the range equivalent of the pixel position of the cursor\r\n        let cursor = this.xScale.invert(+e.offsetX - this.css.margin.left)\r\n\r\n        let c = cursor.getTime()\r\n        let a = range.min \r\n        let b = range.max\r\n\r\n        // check - a scale of 10 ms is the smallest\r\n        if ((b-a < 10)&&(k<1)) return\r\n\r\n        // c stays where it was\r\n        range.min =  k*(a-c) + c \r\n        range.max =  k*(b-c) + c \r\n    },\r\n\r\n    moveTimeAxis( e, range) {\r\n        // get the move\r\n        let move = this.xScale.invert(e.movementX).getTime() - this.xScale.invert(0).getTime()\r\n        range.min -= move\r\n        range.max -= move\r\n    },\r\n\r\n    zoomXY() {\r\n        // the source event\r\n        let e = d3.event.sourceEvent\r\n\r\n        // check the event type\r\n        if (e.type == \"wheel\") this.scaleYAxis(e, this.yRange )\r\n        else if (e.type == \"mousemove\") this.moveXY(e, this.xRange, this.yRange)\r\n        else return\r\n\r\n        // and draw the chart\r\n        this.drawAll()\r\n    },\r\n\r\n    moveXY(e,xRange, yRange) {\r\n        // get the time move\r\n        let move = this.xScale.invert(e.movementX).getTime() - this.xScale.invert(0).getTime()\r\n        xRange.min -= move\r\n        xRange.max -= move\r\n\r\n        // get the y-move\r\n        move = this.yScale.invert(e.movementY) - this.yScale.invert(0)\r\n        yRange.min -= move\r\n        yRange.max -= move\r\n    }\r\n}","import * as d3 from 'd3'\r\nimport {chartClass} from './xy-chart.js'\r\nimport {timeDrawMethods } from './time-chart-draw'\r\nimport {timeZoomMethods } from './time-chart-zoom'\r\n\r\n// A class for a timechart\r\n// The x-value for the time chart are the nr of ms in a date object\r\n// Note that we do not store javascript Date objects for each data point\r\n//\r\n// Time format is as described in d3.js \"%Y-%m-%dT%H:%M:%S.%LZ\"\r\n// relative time starts at 0, absolute time starts at the current date = Date.now()\r\n\r\nexport class timeChartClass extends chartClass{                \r\n\r\n    constructor(svgId){\r\n\r\n        // call the super constructor\r\n        super(svgId)\r\n\r\n        // a date object used in calculations\r\n        this.date = new Date()\r\n\r\n        // the function to draw a time axis\r\n        this.timeAxis = {\r\n            ticks: null,\r\n            format: \"\",\r\n            label: \"\"\r\n        }\r\n\r\n        // a default time format\r\n        this.timeFormat = \"%H:%M:%S\"\r\n\r\n        // default time type - can be relative or absolute\r\n        this.timeType = \"relative\"\r\n\r\n        // the default range\r\n        this.xRange = { min: Date.now(), max: Date.now() + 60000 }\r\n    }\r\n\r\n    setTimeFormat(type, format) {\r\n\r\n        // check\r\n        if ((type == \"relative\")||(type == \"absolute\")) this.timeType = type\r\n        else console.log(\"INVALID TIME TYPE:\", type)\r\n\r\n        // check\r\n        if ( (d3.timeParse(format)) == null)  console.log(\"INVALID TIME FORMAT:\", format)\r\n        else this.timeFormat = format\r\n    }\r\n\r\n    setTimeRange(minStr, maxStr)\r\n    {\r\n        let parse = d3.timeParse(this.timeFormat)\r\n        let delta = parse( maxStr ).getTime() - parse( minStr ).getTime()\r\n        if (this.timeType == \"relative\")   this.xRange.min = 0\r\n        else if (this.timeType == \"absolute\") this.xRange.min = Date.now() \r\n        this.xRange.max = this.xRange.min + delta\r\n    }\r\n\r\n    createxScale(){\r\n\r\n        let min = new Date(this.xRange.min)\r\n        let max = new Date(this.xRange.max)\r\n\r\n        let format = \"\"\r\n        let ticks = 0\r\n        let label = \"\"\r\n\r\n        // I count the hours since you went away - I count the minutes and the seconds too\r\n        // determine the type of scale we will show - day week month year\r\n        let nrOfDays = d3.timeDay.count(min, max)\r\n        if (nrOfDays > 1) {\r\n            if (nrOfDays > 3650) format = \"%y\", ticks = d3.timeYear.every(5), label = \"year\"\r\n            else if (nrOfDays > 730) format = \"%Y\", ticks = d3.timeYear.every(1), label = \"year\"\r\n            else if (nrOfDays > 365) format = \"%b'%y\", ticks = d3.timeMonth.every(3), label = \"month\"\r\n            else if (nrOfDays > 60) format = \"%b\", ticks = d3.timeMonth.every(1), label = \"month\"\r\n            else if (nrOfDays > 10) format = \"%a\", ticks = d3.timeDay.every(7), label = \"day\"\r\n            else if (nrOfDays >  1) format = \"%a\", ticks = d3.timeDay.every(1), label = \"day\"\r\n        }\r\n        else {\r\n            // count the nr of hours\r\n            let nrOfHours = d3.timeHour.count(min, max)\r\n            if (nrOfHours > 12) format = \"%H\", ticks = d3.timeHour.every(3), label = \"hr\"\r\n            else if (nrOfHours > 2) format = \"%H\", ticks = d3.timeHour.every(1), label = \"hr\"\r\n            // count the minutes\r\n            else {\r\n                let nrOfMinutes = d3.timeMinute.count(min, max)\r\n                if (nrOfMinutes > 30) format = \"%M\", ticks = d3.timeMinute.every(15), label = \"min\"\r\n                else if (nrOfMinutes > 15) format = \"%M\", ticks = d3.timeMinute.every(5), label = \"min\"\r\n                else if (nrOfMinutes > 2) format = \"%M\", ticks = d3.timeMinute.every(1), label = \"min\"\r\n                else {\r\n                    // count the seconds\r\n                    let nrOfSeconds = d3.timeSecond.count(min, max)\r\n                    if (nrOfSeconds > 60) format = \"%S\", ticks = d3.timeSecond.every(15), label = \"sec\"\r\n                    else if (nrOfSeconds > 30) format = \"%S\", ticks = d3.timeSecond.every(10), label = \"sec\"\r\n                    else if (nrOfSeconds > 15) format = \"%S\", ticks = d3.timeSecond.every(5), label = \"sec\"\r\n                    else if (nrOfSeconds > 1) format = \"%S\", ticks = d3.timeSecond.every(1), label = \"sec\"\r\n                    else {\r\n                        // count the ms\r\n                        let nrOfms = d3.timeMillisecond.count(min, max)\r\n                        if (nrOfms > 150) format = \"%L\", ticks = d3.timeMillisecond.every(100), label = \"msec\"\r\n                        else if (nrOfms > 15) format = \"%L\", ticks = d3.timeMillisecond.every(10), label = \"msec\"\r\n                        else format = \"%L\", ticks = d3.timeMillisecond.every(1), label = \"msec\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // save the results\r\n        this.timeAxis.ticks = ticks\r\n        this.timeAxis.format = format\r\n        this.timeAxis.label = label\r\n\r\n        // set the scale for the x-axis\r\n        this.xScale = d3.scaleTime()\r\n            .range([0,this.chartArea.width])\r\n            .domain([min, max])\r\n\r\n        return true\r\n    }\r\n\r\n    drawxAxis() {\r\n        // shorter notation\r\n        const width = this.chartArea.width\r\n        const height = this.chartArea.height\r\n        const margin = this.css.margin        \r\n        \r\n        // append a group for the axis\r\n        const xAxis = this.svg.append(\"g\")\r\n            .attr(\"class\", \"x-axis\")\r\n            .attr(\"transform\", `translate( ${margin.left}, ${height + margin.top})`)   \r\n\r\n        let drawTimeAxis = d3.axisBottom(this.xScale).ticks( this.timeAxis.ticks ).tickFormat(d3.timeFormat( this.timeAxis.format )).tickSize(-height)\r\n\r\n        // draw the x-axis ticks - no selection or any other action on the ticks !\r\n        xAxis.append(\"g\")\r\n            .attr(\"class\", \"x-ticks\")\r\n            .attr(\"cursor\", \"none\")\r\n            .attr(\"pointer-events\", \"none\")\r\n            .call(drawTimeAxis)\r\n\r\n        // put a label on the axis\r\n        xAxis.append(\"text\")\r\n            .attr(\"fill\", this.css.labelColor)\r\n            .attr(\"font-size\",this.css.labelFontSize)\r\n            .attr(\"x\",width - (this.timeAxis.label.length)*5)\r\n            .attr(\"y\",margin.bottom)\r\n            .attr(\"text-anchor\", \"start\")\r\n            .text(this.timeAxis.label)\r\n\r\n        // make an invisible rectangle over the chart + x-axis for the zooming behaviour\r\n        xAxis.append(\"rect\")\r\n            .attr(\"x\", 0).attr(\"y\", 0)\r\n            .attr(\"width\",width).attr(\"height\",margin.bottom)\r\n            .attr(\"opacity\",0)\r\n            .attr(\"style\",\"cursor:e-resize\")\r\n            .call(d3.zoom().on(\"zoom\", () => this.zoomTimeAxis()))\r\n    }\r\n\r\n    shiftIntoView( points = this.dataSeries[0] ) {\r\n\r\n        let nPoints = points.length\r\n        if (nPoints < 2) return\r\n        let r = this.xRange\r\n        let x0 = this.timeType == \"relative\" ? points[0].x : 0\r\n\r\n        // only shift into view if we are adding points to the end of the visible chart\r\n        if ( (r.max < points[nPoints-1].x - x0) && (r.max >= points[nPoints-2].x - x0)) {               \r\n            let delta = r.max - r.min\r\n            r.max = points[nPoints-1].x - x0\r\n            r.min = r.max - delta\r\n        }\r\n    }\r\n}\r\n\r\n// mixin the drawing methods\r\nObject.assign(timeChartClass.prototype, timeDrawMethods)\r\n\r\n// mixin the zooming methods\r\nObject.assign(timeChartClass.prototype, timeZoomMethods)","import * as d3 from 'd3'\r\n/*\r\n    layout\r\n        background\r\n        rect\r\n        fontSize\r\n        entries[]\r\n            color\r\n            text\r\n*/\r\n\r\n// a class to draw a simple color coded legend on a chart\r\nexport class legendClass {\r\n\r\n    constructor(svg,layout) {\r\n        this.svg = svg                  // the container for the legend\r\n        this.layout = layout            // the legend descriptor\r\n        this.position = {\r\n            x:layout.position.x,\r\n            y:layout.position.y}        // the initial position of the legend in the svg\r\n        this.svgLegend = null           // the resulting svg legend \r\n    }   \r\n\r\n    getColor(index) {\r\n        if ((this.layout.entries) && (index < this.layout.entries.length)) return this.layout.entries[index].color\r\n    }\r\n\r\n    draw() {\r\n\r\n        // if there are no entries, just return\r\n        if (this.layout.entries.length < 1) return\r\n\r\n        // some constants to position the text and boxes in the legend\r\n        const colorBoxSize = 10\r\n        const leftMargin = 5\r\n        const topMargin = 3\r\n        const textWidth = 40\r\n\r\n        // the box for the legend - we make one row of 6 columns\r\n        this.layout.rect.width = (leftMargin + colorBoxSize + leftMargin + textWidth)*6\r\n        this.layout.rect.height = colorBoxSize + 2*topMargin\r\n\r\n        // add a legend to the chart\r\n        this.svgLegend = this.svg.append(\"g\")\r\n           .attr(\"transform\",`translate(${this.position.x},${this.position.y})`)\r\n           .attr(\"class\",\"legend\")\r\n\r\n        // add the empty legend entries\r\n        let entries = this.svgLegend.selectAll(\"g\")\r\n            .data(this.layout.entries)\r\n            .enter()\r\n\r\n       // The rectangle for the legend\r\n       this.svgLegend.append(\"rect\")\r\n           .attr(\"width\", this.layout.rect.width)\r\n           .attr(\"height\", this.layout.rect.height)\r\n           .attr(\"x\",0)\r\n           .attr(\"y\",0)\r\n           .style(\"fill\", this.layout.background)\r\n\r\n        // make a color indicator\r\n        entries.append(\"rect\")\r\n            .attr(\"width\", 10)\r\n            .attr(\"height\", 10)\r\n            .attr(\"x\",function(d,i) { return `${i*(leftMargin + colorBoxSize + leftMargin + textWidth) + leftMargin}px`      })       \r\n            .attr(\"y\",function(d,i) { return `${topMargin}` })      \r\n            .style(\"fill\", function(d,i){return d.color });\r\n   \r\n        // add the label to the color indicator\r\n        entries.append(\"text\")\r\n            .text(function(d,i) {return d.text })\r\n            .attr(\"x\",function(d,i) { return `${i*(leftMargin + colorBoxSize + leftMargin + textWidth) + leftMargin + colorBoxSize + leftMargin}px` })       \r\n            .attr(\"y\",function(d,i) { return `${topMargin + colorBoxSize}`  })\r\n            .attr(\"font-size\",this.layout.fontSize)\r\n \r\n        // set zooming and translation behaviour of the legend\r\n        this.svgLegend.call(d3.zoom()\r\n            .scaleExtent([1 / 4, 16])\r\n            .on(\"zoom\", this.zoom.bind(this)))\r\n        }\r\n\r\n    // The scale and move  function for the legend\r\n    zoom() {   \r\n       // Get the calculated transform scale\r\n       let scale = d3.event.transform.k\r\n\r\n       // get the dx and dy and make new x and y\r\n       this.position.x = this.position.x + d3.event.sourceEvent.movementX\r\n       this.position.y = this.position.y + d3.event.sourceEvent.movementY\r\n\r\n       // build the transform\r\n       let transform = `translate(${this.position.x} ${this.position.y}) scale( ${scale})`\r\n \r\n       // set the transform attribute\r\n       this.svgLegend.attr(\"transform\",transform)\r\n    }\r\n}","export const stats = {\r\n\r\n    spareRandom: null,\r\n\r\n    // This function generates random numbers along a Normal or Log-normal distribution \r\n    // using the Marsaglia polar method. the mean is 0 and the deviation is 1\r\n    // the function generates two values at each invocation - that is why we have the spare\r\n    normalRandom: ()=> {\r\n\r\n        let val, u, v, s, mul;\r\n\r\n        if(stats.spareRandom !== null) {\r\n            val = stats.spareRandom;\r\n            stats.spareRandom = null;\r\n        }\r\n        else {\r\n            do {\r\n                u = Math.random()*2-1;\r\n                v = Math.random()*2-1;\r\n                s = u*u+v*v;\r\n            } while(s === 0 || s >= 1);\r\n            mul = Math.sqrt(-2 * Math.log(s) / s);\r\n            val = u * mul;\r\n            stats.spareRandom = v * mul;\r\n        }\r\n        return val;\r\n    },\r\n\r\n    cumulative: (points, distri) => {\r\n\r\n        // check\r\n        if (points.length != distri.length) return null\r\n\r\n        // copy but swap x and y\r\n        for (let i=0; i < points.length; i++) distri[i].x = points[i].y\r\n\r\n        // sort the array\r\n        distri.sort( (a, b) => a.x - b.x )\r\n\r\n        // get the size\r\n        let nPoints = distri.length\r\n\r\n        // change the y values\r\n        for (let i=0; i< nPoints; i++) distri[i].y = i/nPoints\r\n\r\n        return distri\r\n    },\r\n\r\n    histogram: (points, bins) => {\r\n\r\n        // the nr of buckets\r\n        let nB = bins.length\r\n\r\n        // th nr of points\r\n        let nP = points.length\r\n\r\n        // check\r\n        if (!nP || !nB) return [0,0]\r\n\r\n        // find the min and max\r\n        let xMin=points[0].y, xMax = points[0].y\r\n        for (let i=0; i<nP; i++) {\r\n            if (points[i].y < xMin) xMin = points[i].y\r\n            else if (points[i].y > xMax) xMax = points[i].y\r\n        }\r\n\r\n        // the bin size\r\n        let bSize = (1.1*xMax - 0.9*xMin)/nB\r\n\r\n        // check\r\n        if (bSize == 0) bSize = 1.0\r\n\r\n        // initialize the buckets\r\n        for (let i=0; i<nB;i++) {\r\n            bins[i].x = 0.9*xMin + i*bSize\r\n            bins[i].y = 0\r\n        }\r\n\r\n        // count the objects per bin\r\n        for (let i=0;i<nP;i++) bins[ Math.floor( (points[i].y - 0.9*xMin) / bSize) ].y++\r\n\r\n        // normalize the bins and find the max value\r\n        let yMin = bins[0].y/nP\r\n        let yMax = yMin\r\n        for (let i=0; i<nB; i++) {\r\n            bins[i].y /= nP\r\n            if (bins[i].y < yMin) yMin = bins[i].y\r\n            else if (bins[i].y > yMax) yMax = bins[i].y\r\n        }\r\n\r\n        // return the min and max value\r\n        return [xMin, xMax, yMin, yMax]\r\n    },\r\n\r\n    constValue: (points,xmin, xmax, value) => {\r\n\r\n        // check and swap if necessary\r\n        if (xmin > xmax) { let tmp = xmin; xmin = xmax; xmax = tmp}\r\n\r\n        // fill the array with the constant value\r\n        for (let i = 0; i <= xmax-xmin; i++) {\r\n            points[i].x = xmin + i\r\n            points[i].y = value\r\n        }\r\n    },\r\n\r\n    rndNormal: (points, xmin, xmax, mu, sigma) => {\r\n        // check and swap if necessary\r\n        if (xmin > xmax) { let tmp = xmin; xmin = xmax; xmax = tmp}\r\n        \r\n        // calculate\r\n        for (let i = 0; i <= xmax-xmin; i++) {\r\n            points[i].x = xmin + i\r\n            points[i].y = normalRandom()*sigma + mu\r\n        }\r\n    },\r\n\r\n    rndUniform: ( points, xmin, xmax, a, b ) => {\r\n        // check and swap if necessary\r\n        if (xmin > xmax) { let tmp = xmin; xmin = xmax; xmax = tmp}\r\n\r\n        // generate the random numbers\r\n        for (let i = 0; i <= xmax-xmin; i++) {\r\n            points[i].x = xmin + i\r\n            points[i].y = (Math.random() * (b-a)) + a\r\n        }\r\n    },\r\n}\r\n\r\n","export const fx = {\r\n    nValues: (points,stepCount, stepSize) => {\r\n\r\n        let stepLength = Math.floor(points.length / stepCount)\r\n        let i,step\r\n\r\n        // fill the array with the steps\r\n        for (step = 0; step < stepCount; step++) {\r\n            for (i = step*stepLength; i < (step+1)*stepLength; i++) {\r\n\r\n                points[i].x = i\r\n                points[i].y = (step+1)*stepSize\r\n            }\r\n        }\r\n\r\n        // fill any remaning entries with the last value (note that step was incremented)\r\n        while (i < points.length) {\r\n            points[i].x = i\r\n            points[i].y = step*stepSize\r\n            i++\r\n        }\r\n\r\n        return true\r\n    },\r\n\r\n    linear: (points,slope) => {\r\n\r\n        for (let i = 0; i < points.length; i++) {\r\n            points[i].x = i\r\n            points[i].y = slope*i\r\n        }\r\n        return true\r\n    },\r\n\r\n    squareWave: (points, offset, amplitude, period) => {\r\n\r\n        console.log(offset, amplitude, period)\r\n        let up = true\r\n        let count = 0\r\n        for (let i = 0; i < points.length; i++) {\r\n            points[i].x = i\r\n            if (up) points[i].y = offset + amplitude\r\n            else points[i].y = offset - amplitude\r\n\r\n            if (count > period/2) {up = !up; count = 0;}\r\n            count++\r\n        }\r\n        return true\r\n        \r\n    },\r\n\r\n    sine: (points, xmin, xmax) => {},\r\n\r\n    findRange: ( data ) => {\r\n        if (data.length < 1) return {min:0, max:0}\r\n        let min = data[0].y , max = data[0].y\r\n        for (let i=0; i < data.length; i++) {\r\n            if (data[i].y < min) min = data[i].y\r\n            else if (data[i].y > max) max = data[i].y\r\n        }\r\n        return {min, max}\r\n    }\r\n}"],"names":["line","d3.line","d3.curveLinear","area","d3.area","d3.event","d3.drag","d3.zoom","d3.select","d3.scaleLinear","d3.axisBottom","d3.axisLeft","d3.timeParse","d3.timeDay","d3.timeYear","d3.timeMonth","d3.timeHour","d3.timeMinute","d3.timeSecond","d3.timeMillisecond","d3.scaleTime","d3.timeFormat"],"mappings":"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"}